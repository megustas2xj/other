enum com_linecorp_square_protocol_thrift_BooleanState{
	NONE = 0,
	OFF = 1,
	ON = 2,
}

enum com_linecorp_square_protocol_thrift_FetchDirection{
	FORWARD = 1,
	BACKWARD = 2,
}

enum com_linecorp_square_protocol_thrift_NotificationPostType{
	POST_MENTION = 2,
	POST_LIKE = 3,
	POST_COMMENT = 4,
	POST_COMMENT_MENTION = 5,
	POST_COMMENT_LIKE = 6,
	POST_RELAY_JOIN = 7,
}

enum com_linecorp_square_protocol_thrift_NotifiedMessageType{
	MENTION = 1,
	REPLY = 2,
}

enum com_linecorp_square_protocol_thrift_ReportType{
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
	OTHER = 4,
	IRRELEVANT_CONTENT = 5,
}

enum com_linecorp_square_protocol_thrift_SquareAttribute{
	NAME = 1,
	WELCOME_MESSAGE = 2,
	PROFILE_IMAGE = 3,
	DESCRIPTION = 4,
	SEARCHABLE = 6,
	CATEGORY = 7,
	INVITATION_URL = 8,
	ABLE_TO_USE_INVITATION_URL = 9,
	STATE = 10,
	EMBLEMS = 11,
	JOIN_METHOD = 12,
}

enum com_linecorp_square_protocol_thrift_SquareAuthorityAttribute{
	UPDATE_SQUARE_PROFILE = 1,
	INVITE_NEW_MEMBER = 2,
	APPROVE_JOIN_REQUEST = 3,
	CREATE_POST = 4,
	CREATE_OPEN_SQUARE_CHAT = 5,
	DELETE_SQUARE_CHAT_OR_POST = 6,
	REMOVE_SQUARE_MEMBER = 7,
	GRANT_ROLE = 8,
	ENABLE_INVITATION_TICKET = 9,
	CREATE_CHAT_ANNOUNCEMENT = 10,
	UPDATE_MAX_CHAT_MEMBER_COUNT = 11,
}

enum com_linecorp_square_protocol_thrift_SquareChatAttribute{
	NAME = 2,
	SQUARE_CHAT_IMAGE = 3,
	STATE = 4,
	TYPE = 5,
	MAX_MEMBER_COUNT = 6,
}

enum com_linecorp_square_protocol_thrift_SquareChatMemberAttribute{
	MEMBERSHIP_STATE = 4,
	NOTIFICATION_MESSAGE = 6,
	NOTIFICATION_NEW_MEMBER = 7,
}

enum com_linecorp_square_protocol_thrift_SquareEventStatus{
	NORMAL = 1,
	ALERT_DISABLED = 2,
}

enum com_linecorp_square_protocol_thrift_SquareEventType{
	RECEIVE_MESSAGE = 0,
	SEND_MESSAGE = 1,
	MUTATE_MESSAGE = 41,
	NOTIFIED_JOIN_SQUARE_CHAT = 2,
	NOTIFIED_INVITE_INTO_SQUARE_CHAT = 3,
	NOTIFIED_LEAVE_SQUARE_CHAT = 4,
	NOTIFIED_DESTROY_MESSAGE = 5,
	NOTIFIED_MARK_AS_READ = 6,
	NOTIFIED_UPDATE_SQUARE_MEMBER_PROFILE = 7,
	NOTIFIED_KICKOUT_FROM_SQUARE = 19,
	NOTIFIED_SHUTDOWN_SQUARE = 18,
	NOTIFIED_DELETE_SQUARE_CHAT = 20,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_NAME = 30,
	NOTIFIED_UPDATE_SQUARE_CHAT_PROFILE_IMAGE = 31,
	NOTIFIED_UPDATE_SQUARE_CHAT_MAX_MEMBER_COUNT = 38,
	NOTIFIED_UPDATE_SQUARE_CHAT_ANNOUNCEMENT = 37,
	NOTIFIED_ADD_BOT = 33,
	NOTIFIED_REMOVE_BOT = 34,
	NOTIFIED_UPDATE_SQUARE = 8,
	NOTIFIED_UPDATE_SQUARE_STATUS = 9,
	NOTIFIED_UPDATE_SQUARE_AUTHORITY = 10,
	NOTIFIED_UPDATE_SQUARE_MEMBER = 11,
	NOTIFIED_UPDATE_SQUARE_CHAT = 12,
	NOTIFIED_UPDATE_SQUARE_CHAT_STATUS = 13,
	NOTIFIED_UPDATE_SQUARE_CHAT_MEMBER = 14,
	NOTIFIED_CREATE_SQUARE_MEMBER = 15,
	NOTIFIED_CREATE_SQUARE_CHAT_MEMBER = 16,
	NOTIFIED_UPDATE_SQUARE_MEMBER_RELATION = 17,
	NOTIFIED_UPDATE_SQUARE_FEATURE_SET = 32,
	NOTIFIED_UPDATE_SQUARE_NOTE_STATUS = 36,
	NOTIFICATION_JOIN_REQUEST = 21,
	NOTIFICATION_JOINED = 22,
	NOTIFICATION_PROMOTED_COADMIN = 23,
	NOTIFICATION_PROMOTED_ADMIN = 24,
	NOTIFICATION_DEMOTED_MEMBER = 25,
	NOTIFICATION_KICKED_OUT = 26,
	NOTIFICATION_SQUARE_DELETE = 27,
	NOTIFICATION_SQUARE_CHAT_DELETE = 28,
	NOTIFICATION_MESSAGE = 29,
	NOTIFICATION_POST_ANNOUNCEMENT = 39,
	NOTIFICATION_POST = 40,
}

enum com_linecorp_square_protocol_thrift_SquareFeatureSetAttribute{
	CREATING_SECRET_SQUARE_CHAT = 1,
	INVITING_INTO_OPEN_SQUARE_CHAT = 2,
	CREATING_SQUARE_CHAT = 3,
}

enum com_linecorp_square_protocol_thrift_SquareMemberAttribute{
	DISPLAY_NAME = 1,
	PROFILE_IMAGE = 2,
	ABLE_TO_RECEIVE_MESSAGE = 3,
	MEMBERSHIP_STATE = 5,
	ROLE = 6,
	PREFERENCE = 7,
}

enum com_linecorp_square_protocol_thrift_SquareMemberRelationAttribute{
	BLOCKED = 1,
}

enum com_linecorp_square_protocol_thrift_SquareMemberRelationState{
	NONE = 1,
	BLOCKED = 2,
}

enum com_linecorp_square_protocol_thrift_SquareMemberRole{
	ADMIN = 1,
	CO_ADMIN = 2,
	MEMBER = 10,
}

enum com_linecorp_square_protocol_thrift_SquareMembershipState{
	JOIN_REQUESTED = 1,
	JOINED = 2,
	REJECTED = 3,
	LEFT = 4,
	KICK_OUT = 5,
	BANNED = 6,
	DELETED = 7,
}

enum com_linecorp_square_protocol_thrift_SquarePreferenceAttribute{
	FAVORITE = 1,
	NOTI_FOR_NEW_JOIN_REQUEST = 2,
}

enum com_linecorp_square_protocol_thrift_common_BooleanState{
	NONE = 0,
	OFF = 1,
	ON = 2,
}

enum com_linecorp_square_protocol_thrift_common_NotifiedMessageType{
	MENTION = 1,
	REPLY = 2,
}

enum com_linecorp_square_protocol_thrift_common_PreconditionFailedExtraInfo{
	DUPLICATED_DISPLAY_NAME = 0,
}

enum com_linecorp_square_protocol_thrift_common_SquareChatAnnouncementType{
	TEXT_MESSAGE = 0,
}

enum com_linecorp_square_protocol_thrift_common_SquareChatMembershipState{
	JOINED = 1,
	LEFT = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareChatState{
	ALIVE = 0,
	DELETED = 1,
	SUSPENDED = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareChatType{
	OPEN = 1,
	SECRET = 2,
	ONE_ON_ONE = 3,
	SQUARE_DEFAULT = 4,
}

enum com_linecorp_square_protocol_thrift_common_SquareEmblem{
	SUPER = 1,
	OFFICIAL = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareErrorCode{
	UNKNOWN = 0,
	INTERNAL_ERROR = 500,
	NOT_IMPLEMENTED = 501,
	TRY_AGAIN_LATER = 503,
	MAINTENANCE = 505,
	NO_PRESENCE_EXISTS = 506,
	ILLEGAL_ARGUMENT = 400,
	AUTHENTICATION_FAILURE = 401,
	FORBIDDEN = 403,
	NOT_FOUND = 404,
	REVISION_MISMATCH = 409,
	PRECONDITION_FAILED = 410,
}

enum com_linecorp_square_protocol_thrift_common_SquareFeatureControlState{
	DISABLED = 1,
	ENABLED = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareJoinMethodType{
	NONE = 0,
	APPROVAL = 1,
	CODE = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareMemberRelationState{
	NONE = 1,
	BLOCKED = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareMemberRole{
	ADMIN = 1,
	CO_ADMIN = 2,
	MEMBER = 10,
}

enum com_linecorp_square_protocol_thrift_common_SquareMembershipState{
	JOIN_REQUESTED = 1,
	JOINED = 2,
	REJECTED = 3,
	LEFT = 4,
	KICK_OUT = 5,
	BANNED = 6,
	DELETED = 7,
}

enum com_linecorp_square_protocol_thrift_common_SquareMessageState{
	SENT = 1,
	DELETED = 2,
	FORBIDDEN = 3,
	UNSENT = 4,
}

enum com_linecorp_square_protocol_thrift_common_SquareState{
	ALIVE = 0,
	DELETED = 1,
	SUSPENDED = 2,
}

enum com_linecorp_square_protocol_thrift_common_SquareType{
	CLOSED = 0,
	OPEN = 1,
}

enum com_linecorp_square_protocol_thrift_common_ve{
	USER = 0,
	ROOM = 1,
	GROUP = 2,
	SQUARE = 3,
	SQUARE_CHAT = 4,
	SQUARE_MEMBER = 5,
	BOT = 6,
}

enum g_a_b_e0_a_a_a_a_r{
	UNKNOWN = 0,
	FACEBOOK = 1,
	APPLE = 2,
}

enum g_a_b_e0_a_a_a_a_s{
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	APP_UPGRADE_REQUIRED = 101,
}

enum g_a_b_e0_a_b_b{
	UNKNOWN = 0,
	PHONE_NUMBER = 1,
	EMAIL = 2,
}

enum g_a_b_e0_a_b_c{
	UNKNOWN = 0,
	SKIP = 1,
	PASSWORD = 2,
	WEB_BASED = 3,
}

enum g_a_b_e0_a_b_g{
	UNKNOWN = 0,
	V1 = 1,
}

enum g_a_b_e0_a_b_h{
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_FOUND = 3,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

enum g_a_b_e0_a_b_l1{
	UNKNOWN = 0,
	SKIP = 1,
	WEB_BASED = 2,
}

enum g_a_b_e0_a_b_q1{
	UNKNOWN = 0,
	FACEBOOK = 1,
	APPLE = 2,
}

enum g_a_b_e0_a_b_t{
	UNKNOWN = 0,
	UNAVAILABLE = 1,
	SMS = 2,
	TTS = 3,
}

enum g_a_b_e0_a_c_a_c{
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_ALLOWED_QR_CODE_LOGIN = 3,
	VERIFICATION_NOTICE_FAILED = 4,
	RETRY_LATER = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

enum g_a_b_e0_a_d_a{
	PASSWORD = 1,
	CARRY_FORWARD = 2,
}

enum g_a_b_e0_a_d_a0{
	MID = 1,
	REF_NO = 2,
	SVC_NO = 3,
}

enum g_a_b_e0_a_d_a1{
	UNKNOWN = 0,
	MAIN = 12,
	DEPOSIT = 1,
	DEPOSIT_BANK = 10,
	DEPOSIT_DEBIT = 11,
	DEPOSIT_ATM = 8,
	DEPOSIT_CONVENIENCE_STORE = 9,
	WITHDRAWAL = 2,
	TRANSFER = 3,
	PAYMENT = 4,
	TRANSFER_REQUEST = 5,
	DUTCH = 6,
	REMOVAL = 7,
	IDENTIFICATION = 13,
	CREDIT_CARD_REGISTRATION = 14,
}

enum g_a_b_e0_a_d_b1{
	GENERAL = 1,
}

enum g_a_b_e0_a_d_bd{
	NONE = 1,
	MESSAGE = 2,
	NOTIFICATION = 3,
}

enum g_a_b_e0_a_d_c{
	PERSONAL_ACCOUNT = 1,
	CURRENT_ACCOUNT = 2,
}

enum g_a_b_e0_a_d_d{
	BANK_ALL = 1,
	BANK_DEPOSIT = 2,
	BANK_WITHDRAWAL = 3,
}

enum g_a_b_e0_a_d_d0{
	NONE = 0,
	UNIQUE = 1,
	LIST = 2,
}

enum g_a_b_e0_a_d_dd{
	READY = 1,
	COMPLETE = 2,
	REQUEST = 3,
	CANCEL = 4,
	FAIL = 5,
}

enum g_a_b_e0_a_d_e0{
	TTS = 1,
	BANK_DEPOSIT = 2,
	CREDIT_CARD = 3,
	BALANCE = 4,
	INDIVIDUAL_INFO = 5,
	REFERENCE_NO = 6,
	CITIZEN_ID = 7,
}

enum g_a_b_e0_a_d_ed{
	DUTCH_FROM = 1,
	FROM = 2,
	DUTCH_TO = 3,
	TO = 4,
	MULTI_TO = 5,
	MULTI_FROM = 6,
}

enum g_a_b_e0_a_d_f0{
	UNKNOWN = 0,
	NONE = 1,
	LP_PINCODE = 2,
	OTP = 3,
	IDPW = 4,
}

enum g_a_b_e0_a_d_f1{
	TRANSFER = 1,
	TRANSFER_REQUEST = 2,
	DUTCH = 3,
	INVITATION = 4,
}

enum g_a_b_e0_a_d_g1{
	NONE = 1,
	DEPOSIT_BANKS = 2,
	BALANCE_TRX_LIST = 3,
	TRANSFER_REQ_LIST = 4,
	CREDITCARD_PAY_LIST = 5,
	BALANCE_PAY_LIST = 6,
	LINECASH_JOIN = 7,
	IDENTIFICATION_UPLOAD = 8,
	CUSTOM_CENTER = 9,
}

enum g_a_b_e0_a_d_gd{
	JOINING_AGREEMENT = 1,
	PAYMENT = 2,
	SETTING = 3,
	ACCOUNT_SETTING = 4,
	FINANCE_GATEWAY = 5,
	JOINING_AGREEMENT_V2 = 2,
	IMAGE = 7,
	SETTING_MENU = 8,
}

enum g_a_b_e0_a_d_i{
	PASSWORD = 1,
	JOIN = 2,
}

enum g_a_b_e0_a_d_i1{
	CITIZEN_ID = 1,
	PASSPORT = 2,
	WORK_PERMIT = 3,
	ALIEN_CARD = 4,
}

enum g_a_b_e0_a_d_id{
	TRANSFER_ACCEPTABLE = 1,
	REMOVE_INVOICE = 2,
	INVOICE_CODE = 3,
	SHOW_ALWAYS_INVOICE = 4,
}

enum g_a_b_e0_a_d_j1{
	UNKNOWN = 0,
	MORE_TAB = 1,
	CHAT_ROOM_PLUS_MENU = 2,
	TRANSFER = 3,
	PAYMENT = 4,
	LINECARD = 5,
	INVITATION = 6,
}

enum g_a_b_e0_a_d_jd{
	UNSPECIFIED = 0,
	LV1 = 1,
	LV2 = 2,
	LV3 = 3,
	LV4 = 4,
	LV9 = 9,
}

enum g_a_b_e0_a_d_k{
	BANK = 1,
	ATM = 2,
	CONVENIENCE_STORE = 3,
	DEBIT_CARD = 4,
	E_CHANNEL = 5,
	VIRTUAL_BANK_ACCOUNT = 6,
	AUTO = 7,
	CVS_LAWSON = 8,
	SEVEN_BANK_DEPOSIT = 9,
	CODE_DEPOSIT = 10,
}

enum g_a_b_e0_a_d_k0{
	UNKNOWN = 0,
	VISA = 1,
	MASTER = 2,
	AMEX = 3,
	DINERS = 4,
	JCB = 5,
}

enum g_a_b_e0_a_d_m{
	AVAILABLE = 0,
	DIFFERENT_REGION = 1,
	UNSUPPORTED_DEVICE = 2,
	PHONE_NUMBER_UNREGISTERED = 3,
	UNAVAILABLE_FROM_LINE_PAY = 4,
	INVALID_USER = 5,
}

enum g_a_b_e0_a_d_m0{
	NULL = 0,
	ATM = 1,
	CONVENIENCE_STORE = 2,
}

enum g_a_b_e0_a_d_m1{
	AUTH_METHODS_SELECTION = 1,
	PASSWORD_SETTING = 2,
	LINE_POINT_PAYMENT_INFO = 3,
	PASSWORD_SETTING_AGAIN = 4,
	PASSWORD = 5,
	GENERAL = 6,
	PASSWORD_TEMPORARY = 7,
	PASSWORD_MYCODE_AUTH = 8,
	SIGNUP = 9,
	CARD_LIST = 10,
	MYCODE_POINT_INFO = 11,
	COUPON_GUIDE = 12,
}

enum g_a_b_e0_a_d_md{
	UNKNOWN = 0,
	ALIVE = 1,
	NOT_JOIN = 6,
	SUSPENDED = 7,
	REMOVED = 8,
}

enum g_a_b_e0_a_d_n{
	CHARGE = 1,
	WITHDRAW = 2,
}

enum g_a_b_e0_a_d_n0{
	SCALE2 = 2,
	SCALE3 = 3,
	HDPI = 3,
	XHDPI = 4,
}

enum g_a_b_e0_a_d_n1{
	UNKNOWN = 0,
	HORIZONTAL = 1,
	SQUARE = 2,
}

enum g_a_b_e0_a_d_o0{
	NONE = 1,
	JP = 2,
	TW = 3,
	TH = 4,
	ID = 5,
}

enum g_a_b_e0_a_d_o1{
	MAIN = 1,
	MAIN_PLUS_BUTTON = 2,
}

enum g_a_b_e0_a_d_p{
	NULL = 0,
	ALIVE = 1,
	WAIT = 2,
	REMOVE = 3,
	IDENTIFICATION_REQUIRED = 4,
	IDENTIFICATION_WAIT = 5,
	MAINTENANCE = 6,
}

enum g_a_b_e0_a_d_p1{
	NULL = 0,
	BALANCE = 1,
	CREDIT_CARD = 2,
	POINT = 3,
	DEBIT_PAYMENT = 4,
}

enum g_a_b_e0_a_d_q{
	UNKNOWN = 0,
	LP = 1,
	PAYMETHOD_CREDIT_CARD = 2,
	PAYMETHOD_BANK_ACCOUNT = 3,
}

enum g_a_b_e0_a_d_qd{
	UNKNOWN = 0,
	PAYMENT = 1,
	PAYMENT_CANCEL = 2,
	PARTIAL_CANCEL = 3,
	TRANSFER = 4,
	TRANSFER_FAIL = 13,
	NOT_JOIN_TRANSFER = 11,
	NOT_JOIN_TRANSFER_COMPLETE = 12,
	NOT_JOIN_TRANSFER_REFUND = 9,
	DEPOSIT = 5,
	DEPOSIT_WAIT = 10,
	DEPOSIT_CANCEL = 14,
	WITHDRAW = 6,
	WITHDRAW_COMPLETE = 7,
	WITHDRAW_FAIL = 8,
}

enum g_a_b_e0_a_d_r1{
	SESSION = 1,
}

enum g_a_b_e0_a_d_rc{
	MENUS = 1,
	URLS = 2,
	CARD_VALIDATION_RULES = 3,
	MESSAGES = 4,
	MYCODE_SHORTCUT = 5,
	INVOICE = 6,
	FEATURES = 7,
}

enum g_a_b_e0_a_d_s{
	BALANCE_INQUIRY = 1,
}

enum g_a_b_e0_a_d_s0{
	NONE = 1,
	NEW = 2,
	HOT = 3,
	EVENT = 4,
}

enum g_a_b_e0_a_d_s1{
	UNKNOWN = 0,
	VER1 = 1,
	VER2 = 2,
	EXTERNAL = 4,
	NONE = 3,
}

enum g_a_b_e0_a_d_t{
	IPASS = 1,
}

enum g_a_b_e0_a_d_t0{
	BUILTIN = 1,
	CHANNEL = 2,
	APP = 3,
	WEB = 4,
}

enum g_a_b_e0_a_d_u0{
	DEPOSIT = 1,
	TRANSFER = 2,
	TRANSFER_REQUEST = 3,
	DUTCH = 4,
	BALANCE_TRX_LIST = 5,
	CREDITCARD_PAY_LIST = 6,
	CREDITCARD_REG = 7,
	SETTINGS = 8,
	CUSTOM = 100,
}

enum g_a_b_e0_a_d_ud{
	OK = 1,
	NOT_ALIVE_USER = 2,
	NEED_BALANCE_DISCLAIMER = 3,
	ECONTEXT_CHARGING_IN_PROGRESS = 4,
	TRANSFER_IN_PROGRESS = 6,
	OK_REMAINING_BALANCE = 7,
	ADVERSE_BALANCE = 8,
	CONFIRM_REQUIRED = 9,
}

enum g_a_b_e0_a_d_v{
	FRIEND_FROM = 1,
	FRIEND_TO = 2,
}

enum g_a_b_e0_a_d_v1{
	NONE = 0,
	NORMAL = 1,
	LINECARD = 2,
	LINECARD_OPTIONAL = 3,
	WEB = 4,
	IPASS = 5,
}

enum g_a_b_e0_a_d_vd{
	LINE = 1,
	LINEPAY = 2,
}

enum g_a_b_e0_a_d_wc{
	NONE = 0,
	ONE_TIME_PAYMENT_AGREEMENT = 1,
	SIMPLE_JOINING_AGREEMENT = 2,
	LINE_CARD_CASH_AGREEMENT = 3,
	LINE_CARD_MONEY_AGREEMENT = 4,
	JOINING_WITH_LINE_CARD_AGREEMENT = 5,
	LINE_CARD_AGREEMENT = 6,
}

enum g_a_b_e0_a_d_y0{
	SUCCESS = 0,
	GENERAL_USER_ERROR = 1000,
	ACCOUNT_NOT_EXISTS = 1101,
	ACCOUNT_INVALID_STATUS = 1102,
	ACCOUNT_ALREADY_EXISTS = 1103,
	MERCHANT_NOT_EXISTS = 1104,
	MERCHANT_INVALID_STATUS = 1105,
	AGREEMENT_REQUIRED = 1107,
	BLACKLISTED = 1108,
	WRONG_PASSWORD = 1109,
	INVALID_CREDIT_CARD = 1110,
	LIMIT_EXCEEDED = 1111,
	CANNOT_PROCEED = 1115,
	TOO_WEAK_PASSWORD = 1120,
	CANNOT_CREATE_ACCOUNT = 1125,
	TEMPORARY_PASSWORD_ERROR = 1130,
	MISSING_PARAMETERS = 1140,
	NO_VALID_MYCODE_ACCOUNT = 1141,
	INSUFFICIENT_BALANCE = 1142,
	TRANSACTION_NOT_FOUND = 1150,
	TRANSACTION_FINISHED = 1152,
	PAYMENT_AMOUNT_WRONG = 1153,
	BALANCE_ACCOUNT_NOT_EXISTS = 1157,
	DUPLICATED_CITIZEN_ID = 1158,
	PAYMENT_REQUEST_NOT_FOUND = 1159,
	AUTH_FAILED = 1169,
	PASSWORD_SETTING_REQUIRED = 1171,
	TRANSACTION_ALREADY_PROCESSED = 1172,
	CURRENCY_NOT_SUPPORTED = 1178,
	PAYMENT_NOT_AVAILABLE = 1180,
	TRANSFER_REQUEST_NOT_FOUND = 1181,
	INVALID_PAYMENT_AMOUNT = 1183,
	INSUFFICIENT_PAYMENT_AMOUNT = 1184,
	EXTERNAL_SYSTEM_MAINTENANCE = 1185,
	EXTERNAL_SYSTEM_INOPERATIONAL = 1186,
	SESSION_EXPIRED = 1192,
	UPGRADE_REQUIRED = 1195,
	REQUEST_TOKEN_EXPIRED = 1196,
	OPERATION_FINISHED = 1198,
	EXTERNAL_SYSTEM_ERROR = 1199,
	PARTIAL_AMOUNT_APPROVED = 1299,
	PINCODE_AUTH_REQUIRED = 1600,
	ADDITIONAL_AUTH_REQUIRED = 1601,
	NOT_BOUND = 1603,
	OTP_USER_REGISTRATION_ERROR = 1610,
	OTP_CARD_REGISTRATION_ERROR = 1611,
	NO_AUTH_METHOD = 1612,
	GENERAL_USER_ERROR_RESTART = 1696,
	GENERAL_USER_ERROR_REFRESH = 1697,
	GENERAL_USER_ERROR_CLOSE = 1698,
	INTERNAL_SERVER_ERROR = 9000,
	INTERNAL_SYSTEM_MAINTENANCE = 9999,
	UNKNOWN_ERROR = 10000,
}

enum g_a_b_e0_a_d_yc{
	NULL = 0,
	ATM = 1,
	CONVENIENCE_STORE = 2,
	ALL = 3,
}

enum g_a_b_e0_a_d_z{
	SUCCESS = 1,
	FAILURE = 2,
	IN_PROGRESS = 3,
}

enum g_a_b_e0_a_d_zc{
	ALL = 7,
	READY = 1,
	COMPLETE = 2,
	WAIT = 3,
	CANCEL = 4,
	FAIL = 5,
	EXPIRE = 6,
}

enum g_a_b_e0_a_e_q{
	UNKNOWN = 0,
	SUCCESS = 1,
	AUTHENTICATION_FAILURE = 2,
	TIMEOUT = 3,
	MAINTENANCE = 4,
	ILLEGAL_ARGUMENT = 5,
	INTERNAL_ERROR = 6,
}

enum g_a_b_e0_a_f_s_h{
	CLIENT = 1,
	SERVER = 2,
}

enum g_a_b_e0_a_f_s_i{
	APP_INSTANCE_LOCAL = 1,
	APP_TYPE_LOCAL = 2,
	GLOBAL = 3,
}

enum g_a_b_e0_a_f_s_n{
	UNKNOWN = 0,
	NONE = 1,
	ILLEGAL_ARGUMENT = 16641,
	NOT_FOUND = 16642,
	NOT_AVAILABLE = 16643,
	TOO_LARGE_VALUE = 16644,
	CLOCK_DRIFT_DETECTED = 16645,
	UNSUPPORTED_APPLICATION_TYPE = 16646,
	DUPLICATED_ENTRY = 16647,
	AUTHENTICATION_FAILED = 16897,
	INTERNAL_SERVER_ERROR = 20737,
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	SERVICE_UNAVAILABLE = 20739,
}

enum g_a_b_i0_a_a_b0{
	INTERNAL_SERVER_ERROR = 0,
	UNAUTHORIZED = 1,
	INVALID_REQUEST = 2,
	INVALID_STATE = 3,
	DEVICE_LIMIT_EXCEEDED = 4096,
	UNSUPPORTED_REGION = 4097,
}

enum g_a_b_i0_a_a_q{
	CLOUD = 1,
	BLE = 2,
	BEACON = 3,
}

enum g_a_b_i0_a_a_v{
	SUCCESS = 0,
	UNKNOWN_ERROR = 1,
	GATT_ERROR = 2,
	GATT_OPERATION_NOT_SUPPORTED = 3,
	GATT_SERVICE_NOT_FOUND = 4,
	GATT_CHARACTERISTIC_NOT_FOUND = 5,
	GATT_CONNECTION_CLOSED = 6,
	CONNECTION_INVALID = 7,
}

enum g_a_b_p_a_a_a_a_a{
	IOS = 16,
	IOS_RC = 17,
	IOS_BETA = 18,
	IOS_ALPHA = 19,
	ANDROID = 32,
	ANDROID_RC = 33,
	ANDROID_BETA = 34,
	ANDROID_ALPHA = 35,
	WAP = 48,
	WAP_RC = 49,
	WAP_BETA = 50,
	WAP_ALPHA = 51,
	BOT = 64,
	BOT_RC = 65,
	BOT_BETA = 66,
	BOT_ALPHA = 67,
	WEB = 80,
	WEB_RC = 81,
	WEB_BETA = 82,
	WEB_ALPHA = 83,
	DESKTOPWIN = 96,
	DESKTOPWIN_RC = 97,
	DESKTOPWIN_BETA = 98,
	DESKTOPWIN_ALPHA = 99,
	DESKTOPMAC = 112,
	DESKTOPMAC_RC = 113,
	DESKTOPMAC_BETA = 114,
	DESKTOPMAC_ALPHA = 115,
	CHANNELGW = 128,
	CHANNELGW_RC = 129,
	CHANNELGW_BETA = 130,
	CHANNELGW_ALPHA = 131,
	CHANNELCP = 144,
	CHANNELCP_RC = 145,
	CHANNELCP_BETA = 146,
	CHANNELCP_ALPHA = 147,
	WINPHONE = 160,
	WINPHONE_RC = 161,
	WINPHONE_BETA = 162,
	WINPHONE_ALPHA = 163,
	BLACKBERRY = 176,
	BLACKBERRY_RC = 177,
	BLACKBERRY_BETA = 178,
	BLACKBERRY_ALPHA = 179,
	WINMETRO = 192,
	WINMETRO_RC = 193,
	WINMETRO_BETA = 194,
	WINMETRO_ALPHA = 195,
	S40 = 40,
	S40_RC = 40,
	S40_BETA = 40,
	S40_ALPHA = 40,
	CHRONO = 224,
	CHRONO_RC = 225,
	CHRONO_BETA = 226,
	CHRONO_ALPHA = 227,
	TIZEN = 256,
	TIZEN_RC = 257,
	TIZEN_BETA = 258,
	TIZEN_ALPHA = 259,
	VIRTUAL = 272,
	FIREFOXOS = 288,
	FIREFOXOS_RC = 289,
	FIREFOXOS_BETA = 290,
	FIREFOXOS_ALPHA = 291,
	IOSIPAD = 304,
	IOSIPAD_RC = 305,
	IOSIPAD_BETA = 306,
	IOSIPAD_ALPHA = 307,
	BIZIOS = 320,
	BIZIOS_RC = 321,
	BIZIOS_BETA = 322,
	BIZIOS_ALPHA = 323,
	BIZANDROID = 336,
	BIZANDROID_RC = 337,
	BIZANDROID_BETA = 338,
	BIZANDROID_ALPHA = 339,
	BIZBOT = 352,
	BIZBOT_RC = 353,
	BIZBOT_BETA = 354,
	BIZBOT_ALPHA = 355,
	CHROMEOS = 368,
	CHROMEOS_RC = 369,
	CHROMEOS_BETA = 370,
	CHROMEOS_ALPHA = 371,
	ANDROIDLITE = 384,
	ANDROIDLITE_RC = 385,
	ANDROIDLITE_BETA = 386,
	ANDROIDLITE_ALPHA = 387,
	WIN10 = 10,
	WIN10_RC = 10,
	WIN10_BETA = 10,
	WIN10_ALPHA = 10,
	BIZWEB = 416,
	BIZWEB_RC = 417,
	BIZWEB_BETA = 418,
	BIZWEB_ALPHA = 419,
	DUMMYPRIMARY = 432,
	DUMMYPRIMARY_RC = 433,
	DUMMYPRIMARY_BETA = 434,
	DUMMYPRIMARY_ALPHA = 435,
	SQUARE = 448,
	SQUARE_RC = 449,
	SQUARE_BETA = 450,
	SQUARE_ALPHA = 451,
	INTERNAL = 464,
	INTERNAL_RC = 465,
	INTERNAL_BETA = 466,
	INTERNAL_ALPHA = 467,
	CLOVAFRIENDS = 480,
	CLOVAFRIENDS_RC = 481,
	CLOVAFRIENDS_BETA = 482,
	CLOVAFRIENDS_ALPHA = 483,
	WATCHOS = 496,
	WATCHOS_RC = 497,
	WATCHOS_BETA = 498,
	WATCHOS_ALPHA = 499,
}

enum g_a_b_p_a_a_a_a_e{
	BUTTON = 1,
	ENTRY_SELECTED = 2,
	BROADCAST_ENTER = 3,
	BROADCAST_STAY = 5,
	BROADCAST_LEAVE = 4,
}

enum g_a_b_p_a_a_a_a_t{
	ILLEGAL_ARGUMENT = 0,
	NOT_FOUND = 5,
	INTERNAL_ERROR = 20,
}

enum g_a_b_q_a_a_a{
	UNKNOWN = 0,
	INTERNAL_ERROR = 500,
	ILLEGAL_ARGUMENT = 400,
	AUTHENTICATION_FAILED = 401,
	BOT_NOT_FOUND = 1,
	BOT_NOT_AVAILABLE = 2,
	NOT_A_MEMBER = 3,
}

enum g_a_e0_a_a_a{
	PERSONAL = 1,
	ROOM = 2,
	GROUP = 3,
	SQUARE_CHAT = 4,
}

enum g_a_e0_a_a_c{
	PRIORITY = 2,
	REGULAR = 1,
	MORE = 3,
}

enum g_a_e0_a_a_d{
	INVALID_REQUEST = 1,
	UNAUTHORIZED = 2,
	SERVER_ERROR = 100,
}

enum g_a_i_t0_a_e{
	INVALID_REQUEST = 1,
	UNAUTHORIZED = 2,
	CONSENT_REQUIRED = 3,
	VERSION_UPDATE_REQUIRED = 4,
	SERVER_ERROR = 100,
}

enum g_a_i_t0_a_i{
	GEOLOCATION = 1,
	ADVERTISING_ID = 2,
	BLUETOOTH_LE = 3,
	QR_CODE = 4,
	ADVERTISING_SDK = 5,
	ADD_TO_HOME = 6,
	SHARE_TARGET_MESSAGE = 7,
	VIDEO_AUTO_PLAY = 8,
	PROFILE_PLUS = 9,
}

enum g_a_i_t0_a_j{
	ALLOW_DIRECT_LINK = 1,
}

enum g_a_i_t0_a_k{
	LIGHT = 1,
	LIGHT_TRANSLUCENT = 2,
	DARK_TRANSLUCENT = 3,
}

enum g_a_n0_a_a_a_a_a_a{
	NEW = 1,
	UPDATE = 2,
	EVENT = 3,
}

enum g_a_n0_a_a_a_b_a{
	INTERNAL_ERROR = 0,
	ILLEGAL_ARGUMENT = 1,
	VERIFICATION_FAILED = 2,
	NOT_FOUND = 3,
	RETRY_LATER = 4,
	HUMAN_VERIFICATION_REQUIRED = 5,
	INVALID_CONTEXT = 100,
	APP_UPGRADE_REQUIRED = 101,
}

enum g_a_t1_v_d{
	PREFIX = 0,
	SUFFIX = 1,
}

enum g_a_t1_v_d0{
	REGULAR = 0,
	SILVER = 1,
	GOLD = 2,
	PLATINUM = 3,
}

enum g_a_t1_v_h0{
	AUTHENTICATION_FAILED = 401,
	INTERNAL_SERVER_ERROR = 500,
	SERVICE_IN_MAINTENANCE_MODE = 503,
}

enum g_a_t1_v_t{
	LV1 = 1,
	LV2 = 2,
	LV3 = 3,
	LV9 = 9,
}

enum g_a_t1_v_u{
	ALIVE = 1,
	SUSPENDED = 2,
	UNREGISTERED = 3,
}

enum h0_a_a_c_a_a_b1{
	OK = 0,
	PRODUCT_UNSUPPORTED = 1,
	TEXT_NOT_SPECIFIED = 2,
	TEXT_STYLE_UNAVAILABLE = 3,
	CHARACTER_COUNT_LIMIT_EXCEEDED = 4,
	CONTAINS_INVALID_WORD = 5,
}

enum h0_a_a_c_a_a_c3{
	STATIC = 1,
	ANIMATION = 2,
	SOUND = 3,
	ANIMATION_SOUND = 4,
	POPUP = 5,
	POPUP_SOUND = 6,
	NAME_TEXT = 7,
	PER_STICKER_TEXT = 8,
}

enum h0_a_a_c_a_a_d3{
	NORMAL = 0,
	BIG = 1,
}

enum h0_a_a_c_a_a_g2{
	DEFAULT = 1,
	VIEW_VIDEO = 2,
}

enum h0_a_a_c_a_a_h2{
	NONE = 0,
	CARRIER = 1,
	BUDDY = 2,
	INSTALL = 3,
	MISSION = 4,
	MUSTBUY = 5,
}

enum h0_a_a_c_a_a_h3{
	STATIC = 1,
	ANIMATION = 2,
}

enum h0_a_a_c_a_a_i{
	GENERAL_CATEGORY = 1,
	CREATORS_TAG = 2,
}

enum h0_a_a_c_a_a_j3{
	GOOGLE = 0,
	APPLE = 1,
	WEBSTORE = 2,
}

enum h0_a_a_c_a_a_k1{
	PURCHASE_ONLY = 0,
	PURCHASE_OR_SUBSCRIPTION = 1,
	SUBSCRIPTION_ONLY = 2,
}

enum h0_a_a_c_a_a_l3{
	OK = 0,
	UNKNOWN = 1,
	NOT_SUPPORTED = 2,
	NO_SUBSCRIPTION = 3,
	SUBSCRIPTION_EXISTS = 4,
	NOT_AVAILABLE = 5,
	CONFLICT = 6,
	OUTDATED_VERSION = 7,
	NO_STUDENT_INFORMATION = 8,
}

enum h0_a_a_c_a_a_n{
	ALL = 0,
	AGE_0_19 = 0,
	AGE_20_30 = 20,
	AGE_30_39 = 30,
	AGE_40_INF = 40,
}

enum h0_a_a_c_a_a_n3{
	AVAILABLE = 0,
	DIFFERENT_STORE = 1,
	NOT_STUDENT = 2,
	ALREADY_PURCHASED = 3,
}

enum h0_a_a_c_a_a_o{
	ALL = 0,
	MALE = 1,
	FEMALE = 2,
}

enum h0_a_a_c_a_a_o2{
	UNKNOWN = 0,
	PRODUCT = 1,
	USER = 2,
}

enum h0_a_a_c_a_a_o3{
	GENERAL = 1,
	STUDENT = 2,
}

enum h0_a_a_c_a_a_p3{
	MONTHLY = 1,
	YEARLY = 2,
}

enum h0_a_a_c_a_a_q1{
	ON_SALE = 0,
	OUTDATED_VERSION = 1,
	NOT_ON_SALE = 2,
}

enum h0_a_a_c_a_a_q3{
	STICKERS_PREMIUM = 1,
}

enum h0_a_a_c_a_a_r3{
	OK = 0,
	UNKNOWN = 1,
	NO_SUBSCRIPTION = 2,
	EXISTS = 3,
	NOT_FOUND = 4,
	EXCEEDS_LIMIT = 5,
	NOT_AVAILABLE = 6,
}

enum h0_a_a_c_a_a_t2{
	UNKNOWN = 0,
	NONE = 1,
	ILLEGAL_ARGUMENT = 16641,
	NOT_FOUND = 16642,
	NOT_AVAILABLE = 16643,
	NOT_PAID_PRODUCT = 16644,
	NOT_FREE_PRODUCT = 16645,
	ALREADY_OWNED = 16646,
	ERROR_WITH_CUSTOM_MESSAGE = 16647,
	NOT_AVAILABLE_TO_RECIPIENT = 16648,
	NOT_AVAILABLE_FOR_CHANNEL_ID = 16649,
	NOT_SALE_FOR_COUNTRY = 16650,
	NOT_SALES_PERIOD = 16651,
	NOT_SALE_FOR_DEVICE = 16652,
	NOT_SALE_FOR_VERSION = 16653,
	ALREADY_EXPIRED = 16654,
	AUTHENTICATION_FAILED = 16897,
	BALANCE_SHORTAGE = 17153,
	INTERNAL_SERVER_ERROR = 20737,
	SERVICE_IN_MAINTENANCE_MODE = 20738,
	SERVICE_UNAVAILABLE = 20739,
}

enum h0_a_a_c_a_a_t3{
	GENERAL = 0,
	CREATORS = 1,
	STICON = 2,
}

enum h0_a_a_c_a_a_u{
	STATIC = 0,
	POPULAR = 1,
	NEW_RELEASE = 2,
}

enum h0_a_a_c_a_a_v1{
	STICKER = 1,
	THEME = 2,
	STICON = 3,
}

enum h0_a_a_c_a_a_w3{
	NOT_PURCHASED = 0,
	SUBSCRIPTION = 1,
}

enum h0_a_a_c_a_a_y2{
	POPULAR = 0,
	NEW_RELEASE = 1,
	EVENT = 2,
	RECOMMENDED = 3,
	POPULAR_WEEKLY = 4,
	POPULAR_MONTHLY = 5,
	POPULAR_RECENTLY_PUBLISHED = 6,
	BUDDY = 7,
	EXTRA_EVENT = 8,
	BROWSING_HISTORY = 9,
	POPULAR_TOTAL_SALES = 10,
	NEW_SUBSCRIPTION = 11,
	POPULAR_SUBSCRIPTION_30D = 30,
}

enum h0_a_a_c_a_a_y3{
	STATIC = 1,
	ANIMATION = 2,
}

enum h0_a_e_a_b_a3{
	NA = 0,
	FRIEND_VIEW = 1,
	OFFICIAL_ACCOUNT_VIEW = 2,
}

enum h0_a_e_a_b_a7{
	ILLEGAL_ARGUMENT = 0,
	INTERNAL_ERROR = 1,
	CONNECTION_ERROR = 2,
	AUTHENTICATIONI_FAILED = 3,
	NEED_PERMISSION_APPROVAL = 4,
	COIN_NOT_USABLE = 5,
	WEBVIEW_NOT_ALLOWED = 6,
}

enum h0_a_e_a_b_aa{
	MESSAGE = 0,
	NOTE = 1,
	CHANNEL = 2,
}

enum h0_a_e_a_b_af{
	FORWARD = 0,
	AUTO_REPLY = 1,
	SUBORDINATE = 2,
	REPLY = 3,
}

enum h0_a_e_a_b_ag{
	PAYMENT_APPLE = 1,
	PAYMENT_GOOGLE = 2,
}

enum h0_a_e_a_b_b0{
	UNKNOWN = 0,
	V1 = 1,
}

enum h0_a_e_a_b_bd{
	INCOMING = 1,
	OUTGOING = 2,
}

enum h0_a_e_a_b_bf{
	ADD = 0,
	REMOVE = 1,
	MODIFY = 2,
}

enum h0_a_e_a_b_c7{
	BLE_LCS_API_USABLE = 26,
	PROHIBIT_MINIMIZE_CHANNEL_BROWSER = 27,
	ALLOW_IOS_WEBKIT = 28,
	PURCHASE_LCS_API_USABLE = 38,
	ALLOW_ANDROID_ENABLE_ZOOM = 48,
}

enum h0_a_e_a_b_ca{
	GROUP = 0,
	ROOM = 1,
	PEER = 2,
}

enum h0_a_e_a_b_cd{
	TIMELINE = 1,
	NEARBY = 2,
	SQUARE = 3,
}

enum h0_a_e_a_b_ci{
	FACEBOOK = 1,
	SINA = 2,
	RENREN = 3,
	FEIXIN = 4,
	BBM = 5,
	APPLE = 6,
}

enum h0_a_e_a_b_d30{
	OVER = 1,
	UNDER = 2,
	UNDEFINED = 3,
}

enum h0_a_e_a_b_d5{
	NEW = 1,
	PLANET = 2,
}

enum h0_a_e_a_b_dd{
	NONE = 0,
	AVAILABLE = 1,
	ALREADY_REQUESTED = 2,
	UNAVAILABLE = 3,
}

enum h0_a_e_a_b_e0{
	UNKNOWN = 0,
	V1 = 1,
	V2 = 2,
}

enum h0_a_e_a_b_ea{
	UNKNOWN = 0,
	WIFI = 1,
	CELLULAR_NETWORK = 2,
}

enum h0_a_e_a_b_ec{
	NOT_SPECIFIED = 0,
	NOT_YET = 1,
	DONE = 3,
	NEED_ENFORCED_INPUT = 4,
}

enum h0_a_e_a_b_fc{
	SERVER_SIDE_EMAIL = 0,
	CLIENT_SIDE_EMAIL = 1,
}

enum h0_a_e_a_b_fe{
	AUDIO = 1,
	VIDEO = 2,
	LIVE = 3,
}

enum h0_a_e_a_b_ff{
	APPLE_APNS = 1,
	GOOGLE_C2DM = 2,
	NHN_NNI = 3,
	SKT_AOM = 4,
	MS_MPNS = 5,
	RIM_BIS = 6,
	GOOGLE_GCM = 7,
	NOKIA_NNAPI = 8,
	TIZEN = 9,
	MOZILLA_SIMPLE = 10,
	LINE_BOT = 17,
	LINE_WAP = 18,
	APPLE_APNS_VOIP = 19,
	MS_WNS = 20,
	GOOGLE_FCM = 21,
	CLOVA = 22,
	CLOVA_VOIP = 23,
	HUAWEI_HCM = 24,
}

enum h0_a_e_a_b_fi{
	OTHER = 0,
	ADVERTISING = 1,
	GENDER_HARASSMENT = 2,
	HARASSMENT = 3,
}

enum h0_a_e_a_b_g{
	SKIP = 0,
	PINCODE = 1,
	SECURITY_CENTER = 2,
}

enum h0_a_e_a_b_g7{
	PROFILE = 0,
	FRIENDS = 1,
	GROUP = 2,
}

enum h0_a_e_a_b_gc{
	ILLEGAL_ARGUMENT = 0,
	AUTHENTICATION_FAILED = 1,
	DB_FAILED = 2,
	INVALID_STATE = 3,
	EXCESSIVE_ACCESS = 4,
	NOT_FOUND = 5,
	INVALID_MID = 9,
	NOT_A_MEMBER = 10,
	INVALID_LENGTH = 6,
	NOT_AVAILABLE_USER = 7,
	NOT_AUTHORIZED_DEVICE = 8,
	NOT_AUTHORIZED_SESSION = 14,
	INCOMPATIBLE_APP_VERSION = 11,
	NOT_READY = 12,
	NOT_AVAILABLE_SESSION = 13,
	SYSTEM_ERROR = 15,
	NO_AVAILABLE_VERIFICATION_METHOD = 16,
	NOT_AUTHENTICATED = 17,
	INVALID_IDENTITY_CREDENTIAL = 18,
	NOT_AVAILABLE_IDENTITY_IDENTIFIER = 19,
	INTERNAL_ERROR = 20,
	NO_SUCH_IDENTITY_IDENFIER = 21,
	DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY = 22,
	ILLEGAL_IDENTITY_CREDENTIAL = 23,
	UNKNOWN_CHANNEL = 24,
	NO_SUCH_MESSAGE_BOX = 25,
	NOT_AVAILABLE_MESSAGE_BOX = 26,
	CHANNEL_DOES_NOT_MATCH = 27,
	NOT_YOUR_MESSAGE = 28,
	MESSAGE_DEFINED_ERROR = 29,
	USER_CANNOT_ACCEPT_PRESENTS = 30,
	USER_NOT_STICKER_OWNER = 32,
	MAINTENANCE_ERROR = 33,
	ACCOUNT_NOT_MATCHED = 34,
	ABUSE_BLOCK = 35,
	NOT_FRIEND = 36,
	NOT_ALLOWED_CALL = 37,
	BLOCK_FRIEND = 38,
	INCOMPATIBLE_VOIP_VERSION = 39,
	INVALID_SNS_ACCESS_TOKEN = 40,
	EXTERNAL_SERVICE_NOT_AVAILABLE = 41,
	NOT_ALLOWED_ADD_CONTACT = 42,
	NOT_CERTIFICATED = 43,
	NOT_ALLOWED_SECONDARY_DEVICE = 44,
	INVALID_PIN_CODE = 45,
	NOT_FOUND_IDENTITY_CREDENTIAL = 46,
	EXCEED_FILE_MAX_SIZE = 47,
	EXCEED_DAILY_QUOTA = 48,
	NOT_SUPPORT_SEND_FILE = 49,
	MUST_UPGRADE = 50,
	NOT_AVAILABLE_PIN_CODE_SESSION = 51,
	EXPIRED_REVISION = 52,
	NOT_YET_PHONE_NUMBER = 54,
	BAD_CALL_NUMBER = 55,
	UNAVAILABLE_CALL_NUMBER = 56,
	NOT_SUPPORT_CALL_SERVICE = 57,
	CONGESTION_CONTROL = 58,
	NO_BALANCE = 59,
	NOT_PERMITTED_CALLER_ID = 60,
	NO_CALLER_ID_LIMIT_EXCEEDED = 61,
	CALLER_ID_VERIFICATION_REQUIRED = 62,
	NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 63,
	MESSAGE_NOT_FOUND = 64,
	INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT = 65,
	ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED = 66,
	ACCOUNT_MIGRATION_PINCODE_BLOCKED = 67,
	INVALID_PASSWORD_FORMAT = 69,
	FEATURE_RESTRICTED = 70,
	MESSAGE_NOT_DESTRUCTIBLE = 71,
	PAID_CALL_REDEEM_FAILED = 72,
	PREVENTED_JOIN_BY_TICKET = 73,
	SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT = 75,
	SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY = 76,
	SECURITY_CENTER_NOT_VERIFIED = 77,
	SECURITY_CENTER_BLOCKED_BY_SETTING = 78,
	SECURITY_CENTER_BLOCKED = 79,
	TALK_PROXY_EXCEPTION = 80,
	E2EE_INVALID_PROTOCOL = 2,
	E2EE_RETRY_ENCRYPT = 2,
	E2EE_UPDATE_SENDER_KEY = 2,
	E2EE_UPDATE_RECEIVER_KEY = 2,
	E2EE_INVALID_ARGUMENT = 2,
	E2EE_INVALID_VERSION = 2,
	E2EE_SENDER_DISABLED = 2,
	E2EE_RECEIVER_DISABLED = 2,
	E2EE_SENDER_NOT_ALLOWED = 2,
	E2EE_RECEIVER_NOT_ALLOWED = 2,
	E2EE_RESEND_FAIL = 2,
	E2EE_RESEND_OK = 2,
	HITOKOTO_BACKUP_NO_AVAILABLE_DATA = 93,
	E2EE_UPDATE_PRIMARY_DEVICE = 2,
	SUCCESS = 95,
	CANCEL = 96,
	E2EE_PRIMARY_NOT_SUPPORT = 2,
	E2EE_RETRY_PLAIN = 2,
	E2EE_RECREATE_GROUP_KEY = 2,
	E2EE_GROUP_TOO_MANY_MEMBERS = 2,
	SERVER_BUSY = 101,
	NOT_ALLOWED_ADD_FOLLOW = 102,
	INCOMING_FRIEND_REQUEST_LIMIT = 103,
	OUTGOING_FRIEND_REQUEST_LIMIT = 104,
	OUTGOING_FRIEND_REQUEST_QUOTA = 105,
	DUPLICATED = 106,
	BANNED = 107,
	NOT_AN_INVITEE = 108,
	NOT_AN_OUTSIDER = 109,
	EMPTY_GROUP = 111,
	EXCEED_FOLLOW_LIMIT = 112,
	UNSUPPORTED_ACCOUNT_TYPE = 113,
}

enum h0_a_e_a_b_ge{
	STANDARD = 1,
	CONSTELLA = 2,
}

enum h0_a_e_a_b_gf{
	NORMAL = 0,
	ALERT_DISABLED = 1,
	ALWAYS = 2,
}

enum h0_a_e_a_b_gi{
	UNKNOWN = 0,
	GOURMET = 1,
	BEAUTY = 2,
	TRAVEL = 3,
	SHOPPING = 4,
	ENTERTAINMENT = 5,
	SPORTS = 6,
	TRANSPORT = 7,
	LIFE = 8,
	HOSPITAL = 9,
	FINANCE = 10,
	EDUCATION = 11,
	OTHER = 12,
	ALL = 10000,
}

enum h0_a_e_a_b_h{
	NOT_APPLICABLE = 0,
	NOT_SET = 1,
	SET = 2,
	NEED_ENFORCED_INPUT = 3,
}

enum h0_a_e_a_b_hb{
	ONEWAY = 0,
	BOTH = 1,
	NOT_REGISTERED = 2,
}

enum h0_a_e_a_b_hf{
	END_OF_OPERATION = 0,
	UPDATE_PROFILE = 1,
	UPDATE_SETTINGS = 36,
	NOTIFIED_UPDATE_PROFILE = 2,
	REGISTER_USERID = 3,
	ADD_CONTACT = 4,
	NOTIFIED_ADD_CONTACT = 5,
	BLOCK_CONTACT = 6,
	UNBLOCK_CONTACT = 7,
	NOTIFIED_RECOMMEND_CONTACT = 8,
	CREATE_GROUP = 9,
	UPDATE_GROUP = 10,
	NOTIFIED_UPDATE_GROUP = 11,
	INVITE_INTO_GROUP = 12,
	NOTIFIED_INVITE_INTO_GROUP = 13,
	CANCEL_INVITATION_GROUP = 31,
	NOTIFIED_CANCEL_INVITATION_GROUP = 32,
	LEAVE_GROUP = 14,
	NOTIFIED_LEAVE_GROUP = 15,
	ACCEPT_GROUP_INVITATION = 16,
	NOTIFIED_ACCEPT_GROUP_INVITATION = 17,
	REJECT_GROUP_INVITATION = 34,
	NOTIFIED_REJECT_GROUP_INVITATION = 35,
	KICKOUT_FROM_GROUP = 18,
	NOTIFIED_KICKOUT_FROM_GROUP = 19,
	CREATE_ROOM = 20,
	INVITE_INTO_ROOM = 21,
	NOTIFIED_INVITE_INTO_ROOM = 22,
	LEAVE_ROOM = 23,
	NOTIFIED_LEAVE_ROOM = 24,
	SEND_MESSAGE = 25,
	RECEIVE_MESSAGE = 26,
	SEND_MESSAGE_RECEIPT = 27,
	RECEIVE_MESSAGE_RECEIPT = 28,
	SEND_CONTENT_RECEIPT = 29,
	SEND_CHAT_CHECKED = 40,
	SEND_CHAT_REMOVED = 41,
	RECEIVE_ANNOUNCEMENT = 30,
	INVITE_VIA_EMAIL = 38,
	NOTIFIED_REGISTER_USER = 37,
	NOTIFIED_UNREGISTER_USER = 33,
	NOTIFIED_REQUEST_RECOVERY = 39,
	NOTIFIED_FORCE_SYNC = 42,
	SEND_CONTENT = 43,
	SEND_MESSAGE_MYHOME = 44,
	NOTIFIED_UPDATE_CONTENT_PREVIEW = 45,
	REMOVE_ALL_MESSAGES = 46,
	NOTIFIED_UPDATE_PURCHASES = 47,
	DUMMY = 48,
	UPDATE_CONTACT = 49,
	NOTIFIED_RECEIVED_CALL = 50,
	CANCEL_CALL = 51,
	NOTIFIED_REDIRECT = 52,
	NOTIFIED_CHANNEL_SYNC = 53,
	FAILED_SEND_MESSAGE = 54,
	NOTIFIED_READ_MESSAGE = 55,
	FAILED_EMAIL_CONFIRMATION = 56,
	NOTIFIED_PUSH_NOTICENTER_ITEM = 59,
	NOTIFIED_CHAT_CONTENT = 58,
	NOTIFIED_JOIN_CHAT = 60,
	NOTIFIED_LEAVE_CHAT = 61,
	NOTIFIED_TYPING = 62,
	FRIEND_REQUEST_ACCEPTED = 63,
	DESTROY_MESSAGE = 64,
	NOTIFIED_DESTROY_MESSAGE = 65,
	UPDATE_PUBLICKEYCHAIN = 66,
	NOTIFIED_UPDATE_PUBLICKEYCHAIN = 67,
	NOTIFIED_BLOCK_CONTACT = 68,
	NOTIFIED_UNBLOCK_CONTACT = 69,
	UPDATE_GROUPPREFERENCE = 70,
	NOTIFIED_PAYMENT_EVENT = 71,
	REGISTER_E2EE_PUBLICKEY = 2,
	NOTIFIED_E2EE_KEY_EXCHANGE_REQ = 2,
	NOTIFIED_E2EE_KEY_EXCHANGE_RESP = 2,
	NOTIFIED_E2EE_MESSAGE_RESEND_REQ = 2,
	NOTIFIED_E2EE_MESSAGE_RESEND_RESP = 2,
	NOTIFIED_E2EE_KEY_UPDATE = 2,
	NOTIFIED_BUDDY_UPDATE_PROFILE = 78,
	NOTIFIED_UPDATE_LINEAT_TABS = 79,
	UPDATE_ROOM = 80,
	NOTIFIED_BEACON_DETECTED = 81,
	UPDATE_EXTENDED_PROFILE = 82,
	ADD_FOLLOW = 83,
	NOTIFIED_ADD_FOLLOW = 84,
	DELETE_FOLLOW = 85,
	NOTIFIED_DELETE_FOLLOW = 86,
	UPDATE_TIMELINE_SETTINGS = 87,
	NOTIFIED_FRIEND_REQUEST = 88,
	UPDATE_RINGBACK_TONE = 89,
	NOTIFIED_POSTBACK = 90,
	RECEIVE_READ_WATERMARK = 91,
	NOTIFIED_MESSAGE_DELIVERED = 92,
	NOTIFIED_UPDATE_CHAT_BAR = 93,
	NOTIFIED_CHATAPP_INSTALLED = 94,
	NOTIFIED_CHATAPP_UPDATED = 95,
	NOTIFIED_CHATAPP_NEW_MARK = 96,
	NOTIFIED_CHATAPP_DELETED = 97,
	NOTIFIED_CHATAPP_SYNC = 98,
	NOTIFIED_UPDATE_MESSAGE = 99,
	UPDATE_CHATROOMBGM = 100,
	NOTIFIED_UPDATE_CHATROOMBGM = 101,
	UPDATE_RINGTONE = 102,
	UPDATE_USER_SETTINGS = 118,
	NOTIFIED_UPDATE_STATUS_BAR = 119,
	CREATE_CHAT = 120,
	UPDATE_CHAT = 121,
	NOTIFIED_UPDATE_CHAT = 122,
	INVITE_INTO_CHAT = 123,
	NOTIFIED_INVITE_INTO_CHAT = 124,
	CANCEL_CHAT_INVITATION = 125,
	NOTIFIED_CANCEL_CHAT_INVITATION = 126,
	DELETE_SELF_FROM_CHAT = 127,
	NOTIFIED_DELETE_SELF_FROM_CHAT = 128,
	ACCEPT_CHAT_INVITATION = 129,
	NOTIFIED_ACCEPT_CHAT_INVITATION = 130,
	REJECT_CHAT_INVITATION = 131,
	DELETE_OTHER_FROM_CHAT = 132,
	NOTIFIED_DELETE_OTHER_FROM_CHAT = 133,
	NOTIFIED_CONTACT_CALENDAR_EVENT = 134,
	NOTIFIED_CONTACT_CALENDAR_EVENT_ALL = 135,
}

enum h0_a_e_a_b_ib{
	CONTACT_SETTING_NOTIFICATION_DISABLE = 1,
	CONTACT_SETTING_DISPLAY_NAME_OVERRIDE = 2,
	CONTACT_SETTING_CONTACT_HIDE = 4,
	CONTACT_SETTING_FAVORITE = 8,
	CONTACT_SETTING_DELETE = 16,
}

enum h0_a_e_a_b_ii{
	NONE = 1,
	ALL = 2,
}

enum h0_a_e_a_b_jb{
	UNSPECIFIED = 0,
	FRIEND = 1,
	FRIEND_BLOCKED = 2,
	RECOMMEND = 3,
	RECOMMEND_BLOCKED = 4,
	DELETED = 5,
	DELETED_BLOCKED = 6,
}

enum h0_a_e_a_b_jc{
	BIRTHDAY = 0,
}

enum h0_a_e_a_b_jg{
	GOOGLE = 0,
	BAIDU = 1,
	FOURSQUARE = 2,
}

enum h0_a_e_a_b_jh{
	UNKNOWN = 0,
	DIRECT_INVITATION = 1,
	DIRECT_CHAT = 2,
	GROUP_INVITATION = 3,
	GROUP_CHAT = 4,
	ROOM_INVITATION = 5,
	ROOM_CHAT = 6,
	FRIEND_PROFILE = 7,
	DIRECT_CHAT_SELECTED = 8,
	GROUP_CHAT_SELECTED = 9,
	ROOM_CHAT_SELECTED = 10,
	DEPRECATED = 11,
}

enum h0_a_e_a_b_kb{
	MID = 0,
	PHONE = 1,
	EMAIL = 2,
	USERID = 3,
	PROXIMITY = 4,
	GROUP = 5,
	USER = 6,
	QRCODE = 7,
	PROMOTION_BOT = 8,
	CONTACT_MESSAGE = 9,
	FRIEND_REQUEST = 10,
	REPAIR = 128,
	FACEBOOK = 2305,
	SINA = 2306,
	RENREN = 2307,
	FEIXIN = 2308,
	BBM = 2309,
	BEACON = 11,
}

enum h0_a_e_a_b_kg{
	REQUEST_DUPLICATION = 3001,
	INVALID_PARAMETER = 3002,
	NOT_ENOUGH_BALANCE = 3003,
	AUTHENTICATION_FAIL = 3004,
	API_ACCESS_FORBIDDEN = 3005,
	MEMBER_ACCOUNT_NOT_FOUND = 3006,
	SERVICE_ACCOUNT_NOT_FOUND = 3007,
	TRANSACTION_NOT_FOUND = 3008,
	ALREADY_REVERSED_TRANSACTION = 3009,
	MESSAGE_NOT_READABLE = 3010,
	HTTP_REQUEST_METHOD_NOT_SUPPORTED = 3011,
	HTTP_MEDIA_TYPE_NOT_SUPPORTED = 3012,
	NOT_ALLOWED_TO_DEPOSIT = 3013,
	NOT_ALLOWED_TO_PAY = 3014,
	TRANSACTION_ACCESS_FORBIDDEN = 3015,
	INVALID_SERVICE_CONFIGURATION = 4001,
	DCS_COMMUNICATION_FAIL = 5004,
	UPDATE_BALANCE_FAIL = 5007,
	SYSTEM_ERROR = 5999,
	SYSTEM_MAINTENANCE = 5888,
}

enum h0_a_e_a_b_ki{
	PROFILE = 0,
	SETTINGS = 1,
	OPS = 2,
	CONTACT = 3,
	RECOMMEND = 4,
	BLOCK = 5,
	GROUP = 6,
	ROOM = 7,
	NOTIFICATION = 8,
	ADDRESS_BOOK = 9,
}

enum h0_a_e_a_b_l30{
	UNKNOWN = 0,
	LOCATION = 1,
}

enum h0_a_e_a_b_lb{
	NONE = 0,
	IMAGE = 1,
	VIDEO = 2,
	AUDIO = 3,
	HTML = 4,
	PDF = 5,
	CALL = 6,
	STICKER = 7,
	PRESENCE = 8,
	GIFT = 9,
	GROUPBOARD = 10,
	APPLINK = 11,
	LINK = 12,
	CONTACT = 13,
	FILE = 14,
	LOCATION = 15,
	POSTNOTIFICATION = 16,
	RICH = 17,
	CHATEVENT = 18,
	MUSIC = 19,
	PAYMENT = 20,
	EXTIMAGE = 21,
	FLEX = 22,
}

enum h0_a_e_a_b_li{
	UNSPECIFIED = 0,
	UNKNOWN = 1,
	INITIALIZATION = 2,
	OPERATION = 3,
	FULL_SYNC = 4,
	AUTO_REPAIR = 5,
	MANUAL_REPAIR = 6,
	INTERNAL = 7,
}

enum h0_a_e_a_b_m2{
	NORMAL = 1,
	LOW_BATTERY = 2,
}

enum h0_a_e_a_b_m30{
	NO_AVAILABLE = 0,
	PIN_VIA_SMS = 1,
	CALLERID_INDIGO = 2,
	PIN_VIA_TTS = 4,
	SKIP = 10,
}

enum h0_a_e_a_b_mb{
	UNKNOWN = 0,
	EUROPEAN_ECONOMIC_AREA = 1,
}

enum h0_a_e_a_b_n2{
	RESERVED = 0,
	OFFICIAL = 1,
	LINE_AT_0 = 0,
	LINE_AT = 3,
}

enum h0_a_e_a_b_n30{
	FAILED = 0,
	OK_NOT_REGISTERED_YET = 1,
	OK_REGISTERED_WITH_SAME_DEVICE = 2,
	OK_REGISTERED_WITH_ANOTHER_DEVICE = 3,
}

enum h0_a_e_a_b_oe{
	UNKNOWN = 0,
	SUCCESS = 1,
	REQUIRE_SERVER_SIDE_EMAIL = 2,
	REQUIRE_CLIENT_SIDE_EMAIL = 3,
}

enum h0_a_e_a_b_pb{
	PROMOTION_FRIENDS_INVITE = 1,
	CAPABILITY_SERVER_SIDE_SMS = 2,
	LINE_CLIENT_ANALYTICS_CONFIGURATION = 3,
}

enum h0_a_e_a_b_pe{
	UNKNOWN = 0,
	LINE = 1,
	NAVER_KR = 2,
	LINE_PHONE = 3,
}

enum h0_a_e_a_b_qg{
	PUBLIC = 0,
	PRIVATE = 1,
}

enum h0_a_e_a_b_r9{
	NAME = 1,
	PICTURE_STATUS = 2,
	PREVENTED_JOIN_BY_TICKET = 4,
	NOTIFICATION_SETTING = 8,
	INVITATION_TICKET = 16,
	FAVORITE_TIMESTAMP = 32,
	CHAT_TYPE = 64,
}

enum h0_a_e_a_b_rf{
	COIN = 0,
	CREDIT = 1,
	MONTHLY = 2,
}

enum h0_a_e_a_b_rg{
	NEVER_SHOW = 0,
	ONE_WAY = 1,
	MUTUAL = 2,
}

enum h0_a_e_a_b_rh{
	NOT_APPLICABLE = 0,
	NOT_SET = 1,
	SET = 2,
	NEED_ENFORCED_INPUT = 3,
}

enum h0_a_e_a_b_sc{
	OBS_VIDEO = 1,
	OBS_GENERAL = 2,
	OBS_RINGBACK_TONE = 3,
}

enum h0_a_e_a_b_t9{
	BACKGROUND = 0,
	KEYWORD = 1,
}

enum h0_a_e_a_b_tg{
	ALL = 511,
	EMAIL = 1,
	DISPLAY_NAME = 2,
	PHONETIC_NAME = 4,
	PICTURE = 8,
	STATUS_MESSAGE = 16,
	ALLOW_SEARCH_BY_USERID = 32,
	ALLOW_SEARCH_BY_EMAIL = 64,
	BUDDY_STATUS = 128,
	MUSIC_PROFILE = 256,
	AVATAR_PROFILE = 512,
}

enum h0_a_e_a_b_th{
	UNKNOWN = 0,
	TALK = 1,
	SQUARE = 2,
}

enum h0_a_e_a_b_u2{
	ON_AIR = 0,
	LIVE = 1,
}

enum h0_a_e_a_b_ub{
	BEACON_AGREEMENT = 1,
	BLUETOOTH = 2,
	SHAKE_AGREEMENT = 3,
	AUTO_SUGGEST = 4,
	CHATROOM_CAPTURE = 5,
	CHATROOM_MINIMIZEBROWSER = 6,
	CHATROOM_MOBILESAFARI = 7,
	VIDEO_HIGHTLIGHT_WIZARD = 8,
	CHAT_FOLDER = 9,
}

enum h0_a_e_a_b_ue{
	UNKNOWN = 0,
	APP_FOREGROUND = 1,
	PERIODIC = 2,
}

enum h0_a_e_a_b_uf{
	OUT = 0,
	IN = 1,
	TOLLFREE = 2,
	RECORD = 3,
	AD = 4,
	CS = 5,
	OA = 6,
}

enum h0_a_e_a_b_v{
	SIRI = 1,
	GOOGLE_ASSISTANT = 2,
	OS_SHARE = 3,
}

enum h0_a_e_a_b_v2{
	NORMAL = 0,
	VIDEOCAM = 1,
	VOIP = 2,
	RECORD = 3,
}

enum h0_a_e_a_b_v9{
	LOW = 0,
}

enum h0_a_e_a_b_ve{
	USER = 0,
	ROOM = 1,
	GROUP = 2,
	SQUARE = 3,
	SQUARE_CHAT = 4,
	SQUARE_MEMBER = 5,
	BOT = 6,
}

enum h0_a_e_a_b_vg{
	OWNER = 0,
	FRIEND = 1,
}

enum h0_a_e_a_b_vh{
	NOTIFICATION_ENABLE = 1,
	NOTIFICATION_MUTE_EXPIRATION = 2,
	NOTIFICATION_NEW_MESSAGE = 4,
	NOTIFICATION_GROUP_INVITATION = 8,
	NOTIFICATION_SHOW_MESSAGE = 16,
	NOTIFICATION_INCOMING_CALL = 32,
	NOTIFICATION_SOUND_MESSAGE = 256,
	NOTIFICATION_SOUND_GROUP = 512,
	NOTIFICATION_DISABLED_WITH_SUB = 65536,
	NOTIFICATION_PAYMENT = 131072,
	PRIVACY_SYNC_CONTACTS = 64,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 128,
	PRIVACY_SEARCH_BY_USERID = 8192,
	PRIVACY_SEARCH_BY_EMAIL = 16384,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 2097152,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 8388608,
	PRIVACY_ALLOW_FRIEND_REQUEST = 1073741824,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 33554432,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 67108864,
	PRIVACY_AGREE_USE_PAIDCALL = 134217728,
	CONTACT_MY_TICKET = 1024,
	IDENTITY_PROVIDER = 2048,
	IDENTITY_IDENTIFIER = 4096,
	SNS_ACCOUNT = 524288,
	PHONE_REGISTRATION = 1048576,
	PREFERENCE_LOCALE = 32768,
	CUSTOM_MODE = 4194304,
	EMAIL_CONFIRMATION_STATUS = 16777216,
	ACCOUNT_MIGRATION_PINCODE = 268435456,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 536870912,
	SECURITY_CENTER_SETTINGS = 262144,
}

enum h0_a_e_a_b_w{
	IOS = 16,
	IOS_RC = 17,
	IOS_BETA = 18,
	IOS_ALPHA = 19,
	ANDROID = 32,
	ANDROID_RC = 33,
	ANDROID_BETA = 34,
	ANDROID_ALPHA = 35,
	WAP = 48,
	WAP_RC = 49,
	WAP_BETA = 50,
	WAP_ALPHA = 51,
	BOT = 64,
	BOT_RC = 65,
	BOT_BETA = 66,
	BOT_ALPHA = 67,
	WEB = 80,
	WEB_RC = 81,
	WEB_BETA = 82,
	WEB_ALPHA = 83,
	DESKTOPWIN = 96,
	DESKTOPWIN_RC = 97,
	DESKTOPWIN_BETA = 98,
	DESKTOPWIN_ALPHA = 99,
	DESKTOPMAC = 112,
	DESKTOPMAC_RC = 113,
	DESKTOPMAC_BETA = 114,
	DESKTOPMAC_ALPHA = 115,
	CHANNELGW = 128,
	CHANNELGW_RC = 129,
	CHANNELGW_BETA = 130,
	CHANNELGW_ALPHA = 131,
	CHANNELCP = 144,
	CHANNELCP_RC = 145,
	CHANNELCP_BETA = 146,
	CHANNELCP_ALPHA = 147,
	WINPHONE = 160,
	WINPHONE_RC = 161,
	WINPHONE_BETA = 162,
	WINPHONE_ALPHA = 163,
	BLACKBERRY = 176,
	BLACKBERRY_RC = 177,
	BLACKBERRY_BETA = 178,
	BLACKBERRY_ALPHA = 179,
	WINMETRO = 192,
	WINMETRO_RC = 193,
	WINMETRO_BETA = 194,
	WINMETRO_ALPHA = 195,
	S40 = 40,
	S40_RC = 40,
	S40_BETA = 40,
	S40_ALPHA = 40,
	CHRONO = 224,
	CHRONO_RC = 225,
	CHRONO_BETA = 226,
	CHRONO_ALPHA = 227,
	TIZEN = 256,
	TIZEN_RC = 257,
	TIZEN_BETA = 258,
	TIZEN_ALPHA = 259,
	VIRTUAL = 272,
	FIREFOXOS = 288,
	FIREFOXOS_RC = 289,
	FIREFOXOS_BETA = 290,
	FIREFOXOS_ALPHA = 291,
	IOSIPAD = 304,
	IOSIPAD_RC = 305,
	IOSIPAD_BETA = 306,
	IOSIPAD_ALPHA = 307,
	BIZIOS = 320,
	BIZIOS_RC = 321,
	BIZIOS_BETA = 322,
	BIZIOS_ALPHA = 323,
	BIZANDROID = 336,
	BIZANDROID_RC = 337,
	BIZANDROID_BETA = 338,
	BIZANDROID_ALPHA = 339,
	BIZBOT = 352,
	BIZBOT_RC = 353,
	BIZBOT_BETA = 354,
	BIZBOT_ALPHA = 355,
	CHROMEOS = 368,
	CHROMEOS_RC = 369,
	CHROMEOS_BETA = 370,
	CHROMEOS_ALPHA = 371,
	ANDROIDLITE = 384,
	ANDROIDLITE_RC = 385,
	ANDROIDLITE_BETA = 386,
	ANDROIDLITE_ALPHA = 387,
	WIN10 = 10,
	WIN10_RC = 10,
	WIN10_BETA = 10,
	WIN10_ALPHA = 10,
	BIZWEB = 416,
	BIZWEB_RC = 417,
	BIZWEB_BETA = 418,
	BIZWEB_ALPHA = 419,
	DUMMYPRIMARY = 432,
	DUMMYPRIMARY_RC = 433,
	DUMMYPRIMARY_BETA = 434,
	DUMMYPRIMARY_ALPHA = 435,
	SQUARE = 448,
	SQUARE_RC = 449,
	SQUARE_BETA = 450,
	SQUARE_ALPHA = 451,
	INTERNAL = 464,
	INTERNAL_RC = 465,
	INTERNAL_BETA = 466,
	INTERNAL_ALPHA = 467,
	CLOVAFRIENDS = 480,
	CLOVAFRIENDS_RC = 481,
	CLOVAFRIENDS_BETA = 482,
	CLOVAFRIENDS_ALPHA = 483,
	WATCHOS = 496,
	WATCHOS_RC = 497,
	WATCHOS_BETA = 498,
	WATCHOS_ALPHA = 499,
}

enum h0_a_e_a_b_w6{
	NOT_SPECIFIED = 0,
	JP_DOCOMO = 1,
	JP_AU = 2,
	JP_SOFTBANK = 3,
	KR_SKT = 17,
	KR_KT = 18,
	KR_LGT = 19,
	JP_DOCOMO_LINE = 4,
	JP_SOFTBANK_LINE = 5,
	JP_AU_LINE = 6,
}

enum h0_a_e_a_b_wb{
	LOCATION_OS = 1,
	LOCATION_APP = 2,
	VIDEO_AUTO_PLAY = 3,
	HNI = 4,
	AUTO_SUGGEST_LANG = 5,
	CHAT_EFFECT_CACHED_CONTENT_LIST = 6,
}

enum h0_a_e_a_b_wf{
	NOT_SPECIFIED = 0,
	VALID = 1,
	VERIFICATION_REQUIRED = 2,
	NOT_PERMITTED = 3,
	LIMIT_EXCEEDED = 4,
	LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED = 5,
}

enum h0_a_e_a_b_wh{
	NOTIFICATION_ENABLE = 0,
	NOTIFICATION_MUTE_EXPIRATION = 1,
	NOTIFICATION_NEW_MESSAGE = 2,
	NOTIFICATION_GROUP_INVITATION = 3,
	NOTIFICATION_SHOW_MESSAGE = 4,
	NOTIFICATION_INCOMING_CALL = 5,
	NOTIFICATION_SOUND_MESSAGE = 8,
	NOTIFICATION_SOUND_GROUP = 9,
	NOTIFICATION_DISABLED_WITH_SUB = 16,
	NOTIFICATION_PAYMENT = 17,
	NOTIFICATION_MENTION = 40,
	NOTIFICATION_THUMBNAIL = 45,
	NOTIFICATION_BADGE_TALK_ONLY = 65,
	PRIVACY_SYNC_CONTACTS = 6,
	PRIVACY_SEARCH_BY_PHONE_NUMBER = 7,
	PRIVACY_SEARCH_BY_USERID = 13,
	PRIVACY_SEARCH_BY_EMAIL = 14,
	PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS = 51,
	PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN = 21,
	PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME = 23,
	PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME = 35,
	PRIVACY_PROFILE_HISTORY = 57,
	PRIVACY_STATUS_MESSAGE_HISTORY = 54,
	PRIVACY_ALLOW_FRIEND_REQUEST = 30,
	PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND = 25,
	PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL = 26,
	PRIVACY_AGREE_USE_PAIDCALL = 27,
	PRIVACY_AGE_RESULT = 60,
	PRIVACY_AGE_RESULT_RECEIVED = 61,
	PRIVACY_ALLOW_FOLLOW = 63,
	PRIVACY_SHOW_FOLLOW_LIST = 64,
	CONTACT_MY_TICKET = 10,
	IDENTITY_PROVIDER = 11,
	IDENTITY_IDENTIFIER = 12,
	SNS_ACCOUNT = 19,
	PHONE_REGISTRATION = 20,
	PREFERENCE_LOCALE = 15,
	CUSTOM_MODE = 22,
	EMAIL_CONFIRMATION_STATUS = 24,
	ACCOUNT_MIGRATION_PINCODE = 28,
	ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE = 29,
	SECURITY_CENTER_SETTINGS = 18,
	E2EE_ENABLE = 2,
	HITOKOTO_BACKUP_REQUESTED = 34,
	CONTACT_ALLOW_FOLLOWING = 36,
	PRIVACY_ALLOW_NEARBY = 37,
	AGREEMENT_NEARBY = 38,
	AGREEMENT_SQUARE = 39,
	ALLOW_UNREGISTRATION_SECONDARY_DEVICE = 41,
	AGREEMENT_BOT_USE = 42,
	AGREEMENT_SHAKE_FUNCTION = 43,
	AGREEMENT_MOBILE_CONTACT_NAME = 44,
	AGREEMENT_SOUND_TO_TEXT = 46,
	AGREEMENT_PRIVACY_POLICY_VERSION = 47,
	AGREEMENT_AD_BY_WEB_ACCESS = 48,
	AGREEMENT_PHONE_NUMBER_MATCHING = 49,
	AGREEMENT_COMMUNICATION_INFO = 50,
	AGREEMENT_THINGS_WIRELESS_COMMUNICATION = 52,
	AGREEMENT_GDPR = 53,
	AGREEMENT_PROVIDE_LOCATION = 55,
	AGREEMENT_BEACON = 56,
	AGREEMENT_CONTENTS_SUGGEST = 58,
	AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION = 59,
	AGREEMENT_OCR_IMAGE_COLLECTION = 62,
}

enum h0_a_e_a_b_x6{
	MESSAGE = 0,
	MESSAGE_NOTIFICATION = 1,
	NOTIFICATION_CENTER = 2,
}

enum h0_a_e_a_b_xf{
	PAYLOAD_BUY = 101,
	PAYLOAD_CS = 111,
	PAYLOAD_BONUS = 121,
	PAYLOAD_EVENT = 131,
	PAYLOAD_POINT_AUTO_EXCHANGED = 141,
	PAYLOAD_POINT_MANUAL_EXCHANGED = 151,
}

enum h0_a_e_a_b_yf{
	PAYMENT_PG_NONE = 0,
	PAYMENT_PG_AU = 1,
	PAYMENT_PG_AL = 2,
}

enum h0_a_e_a_b_yg{
	HIDDEN = 0,
	PUBLIC = 1000,
}

enum h0_a_e_a_b_z4{
	NOT_A_FRIEND = 0,
	ALWAYS = 1,
}

enum h0_a_e_a_b_z9{
	ANYONE_IN_CHAT = 0,
	CREATOR_ONLY = 1,
	NO_ONE = 2,
}

enum h0_a_e_a_b_zc{
	AUDIO = 1,
	VIDEO = 2,
	FACEPLAY = 3,
}

enum jp_naver_line_shop_protocol_thrift_k1{
	PURCHASE_ONLY = 0,
	PURCHASE_OR_SUBSCRIPTION = 1,
	SUBSCRIPTION_ONLY = 2,
}

enum jp_naver_line_shop_protocol_thrift_t3{
	GENERAL = 0,
	CREATORS = 1,
	STICON = 2,
}

enum jp_naver_line_shop_protocol_thrift_v1{
	STICKER = 1,
	THEME = 2,
	STICON = 3,
}

struct Reservation{
	18: Admission admission;
	 5: string artistName;
	15: required string commEventDesc;
	12: required Timestamp deletableTime;
	 9: required Timestamp doorTime;
	10: required Timestamp enableDoorTime;
	13: EntryCheckMethod entryCheckMethod;
	19: i32 entryCheckTimeoutSec;
	14: string eventDesc;
	 6: string eventImgUrl;
	 3: required string eventTitle;
	 4: string eventVenue;
	 2: i32 offlineEnabled;
	 1: required string reservationNumber;
	 7: required Timestamp startDate;
	 8: required Timestamp startTime;
	17: required list<Ticket> tickets;
	16: required UIInfo uiInfo;
	11: required Timestamp validLimitTime;
}

struct Ticket{
	 2: i32 displayOrder;
	14: string facePhotoUrl;
	 8: string fcId;
	 3: string ownerName;
	 9: string priceString;
	11: string qrCodeId;
	13: string qrCodeType;
	12: string qrCodeValue;
	 5: string seatClass;
	 6: string seatInfoPrimary;
	 7: string seatInfoSecondary;
	 4: string ticketClass;
	10: string ticketDesc;
	 1: required string ticketId;
	15: required UIInfo uiInfo;
}

struct UIInfo{
	 3: string bgColor;
	 5: string bgImgUrl;
	 7: string extData;
	 4: string fgColor;
	 6: string fgImgUrl;
	 2: i32 schemeVersion;
	 1: string uiFormat;
}

struct ApproveSquareMembersRequest{
	 2: MID squareMid;
	 3: list<MID> requestedMemberMids;
}

struct ApproveSquareMembersResponse{
	 1: list<SquareMember> approvedMembers;
	 2: SquareStatus status;
}

struct CheckJoinCodeRequest{
	 2: MID squareMid;
	 3: string joinCode;
}

struct CheckJoinCodeResponse{
	 1: string joinToken;
}

struct CreateSquareChatAnnouncementRequest{
	 1: RequestSequence reqSeq;
	 2: MID squareChatMid;
	 3: SquareChatAnnouncement squareChatAnnouncement;
}

struct CreateSquareChatAnnouncementResponse{
	 1: SquareChatAnnouncement announcement;
}

struct CreateSquareChatRequest{
	 1: RequestSequence reqSeq;
	 2: SquareChat squareChat;
	 3: list<MID> squareMemberMids;
}

struct CreateSquareChatResponse{
	 1: SquareChat squareChat;
	 2: SquareChatStatus squareChatStatus;
	 3: SquareChatMember squareChatMember;
}

struct CreateSquareRequest{
	 1: RequestSequence reqSeq;
	 2: Square square;
	 3: SquareMember creator;
}

struct CreateSquareResponse{
	 1: Square square;
	 2: SquareMember creator;
	 3: SquareAuthority authority;
	 4: SquareStatus status;
	 5: optional SquareFeatureSet featureSet;
	 6: optional NoteStatus noteStatus;
	 7: optional SquareChat squareChat;
	 8: optional SquareChatStatus squareChatStatus;
	 9: optional SquareChatMember squareChatMember;
}

struct DeleteSquareChatAnnouncementRequest{
	 2: MID squareChatMid;
	 3: i64 announcementSeq;
}

struct DeleteSquareChatRequest{
	 2: MID squareChatMid;
	 3: Revision revision;
}

struct DeleteSquareRequest{
	 2: MID mid;
	 3: Revision revision;
}

struct DestroyMessageRequest{
	 2: MID squareChatMid;
	 4: string messageId;
}

struct DestroyMessagesRequest{
	 2: MID squareChatMid;
	 4: set<string> messageIds;
}

struct FetchMyEventsRequest{
	 1: SubscriptionId subscriptionId;
	 2: SyncToken syncToken;
	 3: i32 limit;
	 4: ContinuationToken continuationToken;
}

struct FetchMyEventsResponse{
	 1: optional SubscriptionState subscription;
	 2: list<SquareEvent> events;
	 3: SyncToken syncToken;
	 4: ContinuationToken continuationToken;
}

struct FetchSquareChatEventsRequest{
	 1: SubscriptionId subscriptionId;
	 2: MID squareChatMid;
	 3: SyncToken syncToken;
	 4: i32 limit;
	 5: com_linecorp_square_protocol_thrift_FetchDirection direction;
	 6: optional com_linecorp_square_protocol_thrift_common_BooleanState inclusive;
}

struct FetchSquareChatEventsResponse{
	 1: optional SubscriptionState subscription;
	 2: list<SquareEvent> events;
	 3: SyncToken syncToken;
	 4: ContinuationToken continuationToken;
}

struct FindSquareByEmidRequest{
	 1: MID emid;
}

struct FindSquareByEmidResponse{
	 1: Square square;
	 2: SquareMember myMembership;
	 3: SquareAuthority squareAuthority;
	 4: SquareStatus squareStatus;
	 5: optional SquareFeatureSet squareFeatureSet;
	 6: optional NoteStatus noteStatus;
}

struct FindSquareByInvitationTicketRequest{
	 2: string invitationTicket;
}

struct FindSquareByInvitationTicketResponse{
	 1: Square square;
	 2: SquareMember myMembership;
	 3: SquareAuthority squareAuthority;
	 4: SquareStatus squareStatus;
	 5: optional SquareFeatureSet squareFeatureSet;
	 6: optional NoteStatus noteStatus;
	 7: optional SquareChat chat;
	 8: optional SquareChatStatus chatStatus;
}

struct GetInvitationTicketUrlRequest{
	 2: MID mid;
}

struct GetInvitationTicketUrlResponse{
	 1: string invitationURL;
}

struct GetJoinableSquareChatsRequest{
	 1: MID squareMid;
	10: ContinuationToken continuationToken;
	11: i32 limit;
}

struct GetJoinableSquareChatsResponse{
	 1: list<SquareChat> squareChats;
	 2: ContinuationToken continuationToken;
	 3: i32 totalSquareChatCount;
	 4: map<MID,SquareChatStatus> squareChatStatuses;
}

struct GetJoinedSquareChatsRequest{
	 2: ContinuationToken continuationToken;
	 3: i32 limit;
}

struct GetJoinedSquareChatsResponse{
	 1: list<SquareChat> chats;
	 2: map<MID,SquareChatMember> chatMembers;
	 3: map<MID,SquareChatStatus> statuses;
	 4: ContinuationToken continuationToken;
}

struct GetJoinedSquaresRequest{
	 2: ContinuationToken continuationToken;
	 3: i32 limit;
}

struct GetJoinedSquaresResponse{
	 1: list<Square> squares;
	 2: map<MID,SquareMember> members;
	 3: map<MID,SquareAuthority> authorities;
	 4: map<MID,SquareStatus> statuses;
	 5: ContinuationToken continuationToken;
	 6: optional map<MID,NoteStatus> noteStatuses;
}

struct GetNoteStatusRequest{
	 2: MID squareMid;
}

struct GetNoteStatusResponse{
	 1: MID squareMid;
	 2: NoteStatus status;
}

struct GetPopularKeywordsResponse{
	 1: list<PopularKeyword> popularKeywords;
	 2: Timestamp expiredAt;
}

struct GetSquareAuthoritiesRequest{
	 2: set<MID> squareMids;
}

struct GetSquareAuthoritiesResponse{
	 1: map<MID,SquareAuthority> authorities;
}

struct GetSquareAuthorityRequest{
	 1: MID squareMid;
}

struct GetSquareAuthorityResponse{
	 1: SquareAuthority authority;
}

struct GetSquareCategoriesResponse{
	 1: list<Category> categoryList;
}

struct GetSquareChatAnnouncementsRequest{
	 2: MID squareChatMid;
}

struct GetSquareChatAnnouncementsResponse{
	 1: list<SquareChatAnnouncement> announcements;
}

struct GetSquareChatMemberRequest{
	 2: MID squareMemberMid;
	 3: MID squareChatMid;
}

struct GetSquareChatMemberResponse{
	 1: SquareChatMember squareChatMember;
}

struct GetSquareChatMembersRequest{
	 1: MID squareChatMid;
	 2: ContinuationToken continuationToken;
	 3: i32 limit;
}

struct GetSquareChatMembersResponse{
	 1: list<SquareMember> squareChatMembers;
	 2: ContinuationToken continuationToken;
}

struct GetSquareChatRequest{
	 1: MID squareChatMid;
}

struct GetSquareChatResponse{
	 1: SquareChat squareChat;
	 2: SquareChatMember squareChatMember;
	 3: SquareChatStatus squareChatStatus;
}

struct GetSquareChatStatusRequest{
	 2: MID squareChatMid;
}

struct GetSquareChatStatusResponse{
	 1: SquareChatStatus chatStatus;
}

struct GetSquareFeatureSetRequest{
	 2: MID squareMid;
}

struct GetSquareFeatureSetResponse{
	 1: SquareFeatureSet squareFeatureSet;
}

struct GetSquareMemberRelationRequest{
	 2: MID squareMid;
	 3: MID targetSquareMemberMid;
}

struct GetSquareMemberRelationResponse{
	 1: MID squareMid;
	 2: MID targetSquareMemberMid;
	 3: SquareMemberRelation relation;
}

struct GetSquareMemberRelationsRequest{
	 2: com_linecorp_square_protocol_thrift_common_SquareMemberRelationState state;
	 3: ContinuationToken continuationToken;
	 4: i32 limit;
}

struct GetSquareMemberRelationsResponse{
	 1: list<SquareMember> squareMembers;
	 2: map<MID,SquareMemberRelation> relations;
	 3: ContinuationToken continuationToken;
}

struct GetSquareMemberRequest{
	 2: MID squareMemberMid;
}

struct GetSquareMemberResponse{
	 1: SquareMember squareMember;
	 2: optional SquareMemberRelation relation;
	 3: optional MID oneOnOneChatMid;
}

struct GetSquareMembersRequest{
	 2: set<MID> mids;
}

struct GetSquareMembersResponse{
	 1: map<MID,SquareMember> members;
}

struct GetSquareRequest{
	 2: MID mid;
}

struct GetSquareResponse{
	 1: Square square;
	 2: SquareMember myMembership;
	 3: SquareAuthority squareAuthority;
	 4: SquareStatus squareStatus;
	 5: optional SquareFeatureSet squareFeatureSet;
	 6: optional NoteStatus noteStatus;
}

struct GetSquareStatusRequest{
	 2: MID squareMid;
}

struct GetSquareStatusResponse{
	 1: SquareStatus squareStatus;
}

struct InviteIntoSquareChatRequest{
	 1: list<MID> inviteeMids;
	 2: MID squareChatMid;
}

struct InviteIntoSquareChatResponse{
	 1: list<MID> inviteeMids;
}

struct InviteToSquareRequest{
	 2: MID squareMid;
	 3: list<MID> invitees;
	 4: optional MID squareChatMid;
}

struct JoinSquareChatRequest{
	 1: MID squareChatMid;
}

struct JoinSquareChatResponse{
	 1: SquareChat squareChat;
	 2: SquareChatStatus squareChatStatus;
	 3: SquareChatMember squareChatMember;
}

struct JoinSquareRequest{
	 2: MID squareMid;
	 3: SquareMember member;
	 4: optional MID squareChatMid;
	 5: optional SquareJoinMethodValue joinValue;
}

struct JoinSquareResponse{
	 1: Square square;
	 2: SquareAuthority squareAuthority;
	 3: SquareStatus squareStatus;
	 4: SquareMember squareMember;
	 5: optional SquareFeatureSet squareFeatureSet;
	 6: optional NoteStatus noteStatus;
	 7: optional SquareChat squareChat;
	 8: optional SquareChatStatus squareChatStatus;
	 9: optional SquareChatMember squareChatMember;
}

struct LeaveSquareChatRequest{
	 2: MID squareChatMid;
	 3: bool sayGoodbye;
	 4: Revision squareChatMemberRevision;
}

struct LeaveSquareRequest{
	 2: MID squareMid;
}

struct MarkAsReadRequest{
	 2: MID squareChatMid;
	 4: string messageId;
}

struct RefreshSubscriptionsRequest{
	 2: list<SubscriptionId> subscriptions;
}

struct RefreshSubscriptionsResponse{
	 1: i64 ttlMillis;
	 2: map<SubscriptionId,SubscriptionState> subscriptionStates;
}

struct RejectSquareMembersRequest{
	 2: MID squareMid;
	 3: list<MID> requestedMemberMids;
}

struct RejectSquareMembersResponse{
	 1: list<SquareMember> rejectedMembers;
	 2: SquareStatus status;
}

struct RemoveSubscriptionsRequest{
	 2: list<SubscriptionId> unsubscriptions;
}

struct ReportSquareChatRequest{
	 2: MID squareMid;
	 3: MID squareChatMid;
	 5: com_linecorp_square_protocol_thrift_ReportType reportType;
	 6: optional string otherReason;
}

struct ReportSquareMemberRequest{
	 2: MID squareMemberMid;
	 3: com_linecorp_square_protocol_thrift_ReportType reportType;
	 4: optional string otherReason;
	 5: optional MID squareChatMid;
}

struct ReportSquareMessageRequest{
	 2: MID squareMid;
	 3: MID squareChatMid;
	 4: string squareMessageId;
	 5: com_linecorp_square_protocol_thrift_ReportType reportType;
	 6: optional string otherReason;
}

struct ReportSquareRequest{
	 2: MID squareMid;
	 3: com_linecorp_square_protocol_thrift_ReportType reportType;
	 4: optional string otherReason;
}

struct SearchSquareChatMembersRequest{
	 1: MID squareChatMid;
	 2: SquareChatMemberSearchOption searchOption;
	 3: optional ContinuationToken continuationToken;
	 4: i32 limit;
}

struct SearchSquareChatMembersResponse{
	 1: list<SquareMember> members;
	 2: optional ContinuationToken continuationToken;
}

struct SearchSquareMembersRequest{
	 2: MID squareMid;
	 3: SquareMemberSearchOption searchOption;
	 4: ContinuationToken continuationToken;
	 5: i32 limit;
}

struct SearchSquareMembersResponse{
	 1: list<SquareMember> members;
	 2: Revision revision;
	 3: ContinuationToken continuationToken;
	 4: i32 totalCount;
}

struct SearchSquaresRequest{
	 2: string query;
	 3: ContinuationToken continuationToken;
	 4: i32 limit;
}

struct SearchSquaresResponse{
	 1: list<Square> squares;
	 2: map<string,SquareStatus> squareStatuses;
	 3: map<string,SquareMember> myMemberships;
	 4: ContinuationToken continuationToken;
	 5: optional map<MID,NoteStatus> noteStatuses;
}

struct SendMessageRequest{
	 1: RequestSequence reqSeq;
	 2: MID squareChatMid;
	 3: SquareMessage squareMessage;
}

struct SendMessageResponse{
	 1: SquareMessage createdSquareMessage;
}

struct SquareChatMemberSearchOption{
	 1: optional string displayName;
}

struct SquareEvent{
	 2: Timestamp createdTime;
	 3: com_linecorp_square_protocol_thrift_SquareEventType type;
	 4: SquareEventPayload payload;
	 5: SyncToken syncToken;
	 6: optional com_linecorp_square_protocol_thrift_SquareEventStatus eventStatus;
}

struct SquareEventMutateMessage{
	 1: MID squareChatMid;
	 2: SquareMessage squareMessage;
	 3: RequestSequence reqSeq;
	 4: string senderDisplayName;
}

struct SquareEventNotificationJoinRequest{
	 1: MID squareMid;
	 2: string squareName;
	 3: string requestMemberName;
	 4: string profileImageObsHash;
}

struct SquareEventNotificationMemberUpdate{
	 1: MID squareMid;
	 2: string squareName;
	 3: string profileImageObsHash;
}

struct SquareEventNotificationMessage{
	 1: MID squareChatMid;
	 2: SquareMessage squareMessage;
	 8: RequestSequence reqSeq;
	 3: string senderDisplayName;
	 4: i32 unreadCount;
	 5: bool requiredToFetchChatEvents;
	 6: optional string mentionedMessageId;
	 7: optional com_linecorp_square_protocol_thrift_common_NotifiedMessageType notifiedMessageType;
}

struct SquareEventNotificationPost{
	 1: MID squareMid;
	 2: com_linecorp_square_protocol_thrift_NotificationPostType notificationPostType;
	 3: string thumbnailObsHash;
	 4: string text;
	 5: string actionUri;
}

struct SquareEventNotificationPostAnnouncement{
	 1: MID squareMid;
	 2: string squareName;
	 3: string squareProfileImageObsHash;
	 4: string actionUri;
}

struct SquareEventNotificationSquareChatDelete{
	 1: MID squareChatMid;
	 2: string squareChatName;
	 3: string profileImageObsHash;
}

struct SquareEventNotificationSquareDelete{
	 1: MID squareMid;
	 2: string squareName;
	 3: string profileImageObsHash;
}

struct SquareEventNotifiedAddBot{
	 1: MID squareChatMid;
	 2: SquareMember squareMember;
	 3: MID botMid;
	 4: string botDisplayName;
}

struct SquareEventNotifiedCreateSquareChatMember{
	 1: SquareChat chat;
	 2: SquareChatStatus chatStatus;
	 3: SquareChatMember chatMember;
	 4: Timestamp joinedAt;
	 5: optional SquareMember peerSquareMember;
}

struct SquareEventNotifiedCreateSquareMember{
	 1: Square square;
	 2: SquareAuthority squareAuthority;
	 3: SquareStatus squareStatus;
	 4: SquareMember squareMember;
	 5: optional SquareFeatureSet squareFeatureSet;
	 6: optional NoteStatus noteStatus;
}

struct SquareEventNotifiedDeleteSquareChat{
	 1: SquareChat squareChat;
}

struct SquareEventNotifiedDestroyMessage{
	 1: MID squareChatMid;
	 3: string messageId;
}

struct SquareEventNotifiedInviteIntoSquareChat{
	 1: MID squareChatMid;
	 2: list<SquareMember> invitees;
	 3: SquareMember invitor;
	 4: optional SquareMemberRelation invitorRelation;
}

struct SquareEventNotifiedJoinSquareChat{
	 1: MID squareChatMid;
	 2: SquareMember joinedMember;
}

struct SquareEventNotifiedKickoutFromSquare{
	 1: MID squareChatMid;
	 2: list<SquareMember> kickees;
}

struct SquareEventNotifiedLeaveSquareChat{
	 1: MID squareChatMid;
	 2: MID squareMemberMid;
	 3: bool sayGoodbye;
	 4: optional SquareMember squareMember;
}

struct SquareEventNotifiedMarkAsRead{
	 1: MID squareChatMid;
	 2: MID sMemberMid;
	 4: string messageId;
}

struct SquareEventNotifiedRemoveBot{
	 1: MID squareChatMid;
	 2: SquareMember squareMember;
	 3: MID botMid;
	 4: string botDisplayName;
}

struct SquareEventNotifiedShutdownSquare{
	 1: MID squareChatMid;
	 2: Square square;
}

struct SquareEventNotifiedUpdateSquare{
	 1: MID squareMid;
	 2: Square square;
}

struct SquareEventNotifiedUpdateSquareAuthority{
	 1: MID squareMid;
	 2: SquareAuthority squareAuthority;
}

struct SquareEventNotifiedUpdateSquareChat{
	 1: MID squareMid;
	 2: MID squareChatMid;
	 3: SquareChat squareChat;
}

struct SquareEventNotifiedUpdateSquareChatAnnouncement{
	 1: MID squareChatMid;
	 2: i64 announcementSeq;
}

struct SquareEventNotifiedUpdateSquareChatMaxMemberCount{
	 1: MID squareChatMid;
	 2: i32 maxMemberCount;
	 3: SquareMember editor;
}

struct SquareEventNotifiedUpdateSquareChatMember{
	 1: MID squareChatMid;
	 3: SquareChatMember squareChatMember;
}

struct SquareEventNotifiedUpdateSquareChatProfileImage{
	 1: MID squareChatMid;
	 2: SquareMember editor;
}

struct SquareEventNotifiedUpdateSquareChatProfileName{
	 1: MID squareChatMid;
	 2: SquareMember editor;
	 3: string updatedChatName;
}

struct SquareEventNotifiedUpdateSquareChatStatus{
	 1: MID squareChatMid;
	 2: SquareChatStatusWithoutMessage statusWithoutMessage;
}

struct SquareEventNotifiedUpdateSquareFeatureSet{
	 1: SquareFeatureSet squareFeatureSet;
}

struct SquareEventNotifiedUpdateSquareMember{
	 1: MID squareMid;
	 2: MID squareMemberMid;
	 3: SquareMember squareMember;
}

struct SquareEventNotifiedUpdateSquareMemberProfile{
	 1: MID squareChatMid;
	 2: SquareMember squareMember;
}

struct SquareEventNotifiedUpdateSquareMemberRelation{
	 1: MID squareMid;
	 2: MID myMemberMid;
	 3: MID targetSquareMemberMid;
	 4: SquareMemberRelation squareMemberRelation;
}

struct SquareEventNotifiedUpdateSquareNoteStatus{
	 1: MID squareMid;
	 2: NoteStatus noteStatus;
}

struct SquareEventNotifiedUpdateSquareStatus{
	 1: MID squareMid;
	 2: SquareStatus squareStatus;
}

struct SquareEventPayload{
	17: SquareEventNotifiedCreateSquareChatMember notifiedCreateSquareChatMember;
	18: SquareEventNotifiedUpdateSquareMemberRelation notifiedUpdateSquareMemberRelation;
	33: SquareEventNotifiedUpdateSquareFeatureSet notifiedUpdateSquareFeatureSet;
	36: SquareEventNotifiedUpdateSquareNoteStatus notifiedUpdateSquareNoteStatus;
	37: SquareEventNotifiedUpdateSquareChatAnnouncement notifiedUpdateSquareChatAnnouncement;
	22: SquareEventNotificationJoinRequest notificationJoinRequest;
	23: SquareEventNotificationMemberUpdate notificationJoined;
	24: SquareEventNotificationMemberUpdate notificationPromoteCoadmin;
	25: SquareEventNotificationMemberUpdate notificationPromoteAdmin;
	26: SquareEventNotificationMemberUpdate notificationDemoteMember;
	27: SquareEventNotificationMemberUpdate notificationKickedOut;
	28: SquareEventNotificationSquareDelete notificationSquareDelete;
	29: SquareEventNotificationSquareChatDelete notificationSquareChatDelete;
	30: SquareEventNotificationMessage notificationMessage;
	39: SquareEventNotificationPostAnnouncement notificationPostAnnouncement;
	40: SquareEventNotificationPost notificationPost;
	 1: SquareEventReceiveMessage receiveMessage;
	 2: SquareEventSendMessage sendMessage;
	41: SquareEventMutateMessage mutateMessage;
	 3: SquareEventNotifiedJoinSquareChat notifiedJoinSquareChat;
	 4: SquareEventNotifiedInviteIntoSquareChat notifiedInviteIntoSquareChat;
	 5: SquareEventNotifiedLeaveSquareChat notifiedLeaveSquareChat;
	 6: SquareEventNotifiedDestroyMessage notifiedDestroyMessage;
	 7: SquareEventNotifiedMarkAsRead notifiedMarkAsRead;
	 8: SquareEventNotifiedUpdateSquareMemberProfile notifiedUpdateSquareMemberProfile;
	20: SquareEventNotifiedKickoutFromSquare notifiedKickoutFromSquare;
	19: SquareEventNotifiedShutdownSquare notifiedShutdownSquare;
	21: SquareEventNotifiedDeleteSquareChat notifiedDeleteSquareChat;
	31: SquareEventNotifiedUpdateSquareChatProfileName notifiedUpdateSquareChatProfileName;
	32: SquareEventNotifiedUpdateSquareChatProfileImage notifiedUpdateSquareChatProfileImage;
	38: SquareEventNotifiedUpdateSquareChatMaxMemberCount notifiedUpdateSquareChatMaxMemberCount;
	34: SquareEventNotifiedAddBot notifiedAddBot;
	35: SquareEventNotifiedRemoveBot notifiedRemoveBot;
	 9: SquareEventNotifiedUpdateSquare notifiedUpdateSquare;
	14: SquareEventNotifiedUpdateSquareStatus notifiedUpdateSquareStatus;
	10: SquareEventNotifiedUpdateSquareMember notifiedUpdateSquareMember;
	11: SquareEventNotifiedUpdateSquareChat notifiedUpdateSquareChat;
	15: SquareEventNotifiedUpdateSquareChatStatus notifiedUpdateSquareChatStatus;
	12: SquareEventNotifiedUpdateSquareChatMember notifiedUpdateSquareChatMember;
	13: SquareEventNotifiedUpdateSquareAuthority notifiedUpdateSquareAuthority;
	16: SquareEventNotifiedCreateSquareMember notifiedCreateSquareMember;
}

struct SquareEventReceiveMessage{
	 1: MID squareChatMid;
	 2: SquareMessage squareMessage;
	 3: optional string senderDisplayName;
}

struct SquareEventSendMessage{
	 1: MID squareChatMid;
	 2: SquareMessage squareMessage;
	 3: RequestSequence reqSeq;
	 4: optional string senderDisplayName;
}

struct SquareMemberSearchOption{
	 1: com_linecorp_square_protocol_thrift_common_SquareMembershipState membershipState;
	 2: optional set<com_linecorp_square_protocol_thrift_common_SquareMemberRole> memberRoles;
	 3: optional string displayName;
	 4: optional com_linecorp_square_protocol_thrift_common_BooleanState ableToReceiveMessage;
	 5: optional com_linecorp_square_protocol_thrift_common_BooleanState ableToReceiveFriendRequest;
	 6: optional MID chatMidToExcludeMembers;
	 7: bool includingMe;
	 8: bool excludeBlockedMembers;
}

struct SubscriptionNotification{
	 1: SubscriptionId subscriptionId;
}

struct SubscriptionState{
	 1: SubscriptionId subscriptionId;
	 2: i64 ttlMillis;
}

struct UnsendMessageRequest{
	 2: MID squareChatMid;
	 3: string messageId;
}

struct UnsendMessageResponse{
	 1: SquareMessage unsentMessage;
}

struct UpdateSquareAuthorityRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareAuthorityAttribute> updateAttributes;
	 3: SquareAuthority authority;
}

struct UpdateSquareAuthorityResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareAuthorityAttribute> updatdAttributes;
	 2: SquareAuthority authority;
}

struct UpdateSquareChatMemberRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareChatMemberAttribute> updatedAttrs;
	 3: SquareChatMember chatMember;
}

struct UpdateSquareChatMemberResponse{
	 1: SquareChatMember updatedChatMember;
}

struct UpdateSquareChatRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareChatAttribute> updatedAttrs;
	 3: SquareChat squareChat;
}

struct UpdateSquareChatResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareChatAttribute> updatedAttrs;
	 2: SquareChat squareChat;
}

struct UpdateSquareFeatureSetRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareFeatureSetAttribute> updateAttributes;
	 3: SquareFeatureSet squareFeatureSet;
}

struct UpdateSquareFeatureSetResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareFeatureSetAttribute> updateAttributes;
	 2: SquareFeatureSet squareFeatureSet;
}

struct UpdateSquareMemberRelationRequest{
	 2: MID squareMid;
	 3: MID targetSquareMemberMid;
	 4: set<com_linecorp_square_protocol_thrift_common_SquareMemberRelationAttribute> updatedAttrs;
	 5: SquareMemberRelation relation;
}

struct UpdateSquareMemberRelationResponse{
	 1: MID squareMid;
	 2: MID targetSquareMemberMid;
	 3: set<com_linecorp_square_protocol_thrift_common_SquareMemberRelationAttribute> updatedAttrs;
	 4: SquareMemberRelation relation;
}

struct UpdateSquareMemberRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareMemberAttribute> updatedAttrs;
	 3: set<com_linecorp_square_protocol_thrift_common_SquarePreferenceAttribute> updatedPreferenceAttrs;
	 4: SquareMember squareMember;
}

struct UpdateSquareMemberResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareMemberAttribute> updatedAttrs;
	 2: SquareMember squareMember;
	 3: set<com_linecorp_square_protocol_thrift_common_SquarePreferenceAttribute> updatedPreferenceAttrs;
}

struct UpdateSquareMembersRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareMemberAttribute> updatedAttrs;
	 3: list<SquareMember> members;
}

struct UpdateSquareMembersResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareMemberAttribute> updatedAttrs;
	 2: optional SquareMember editor;
	 3: map<MID,SquareMember> members;
}

struct UpdateSquareRequest{
	 2: set<com_linecorp_square_protocol_thrift_common_SquareAttribute> updatedAttrs;
	 3: Square square;
}

struct UpdateSquareResponse{
	 1: set<com_linecorp_square_protocol_thrift_common_SquareAttribute> updatedAttrs;
	 2: Square square;
}

struct ApprovalValue{
	 1: string message;
}

struct Category{
	 1: i32 id;
	 2: string name;
}

struct CategoryName{
	 1: i32 categoryId;
	 2: map<string,string> names;
}

struct CodeValue{
	 1: optional string code;
}

struct ErrorExtraInfo{
	 1: com_linecorp_square_protocol_thrift_common_PreconditionFailedExtraInfo preconditionFailedExtraInfo;
	 2: UserRestrictionExtraInfo userRestrictionInfo;
}

struct NoteStatus{
	 1: i32 noteCount;
	 2: Timestamp latestCreatedAt;
}

struct PopularKeyword{
	 1: string value;
	 2: bool highlighted;
	 3: i64 id;
}

struct Square{
	11: bool ableToUseInvitationTicket;
	12: com_linecorp_square_protocol_thrift_common_SquareState state;
	13: optional list<com_linecorp_square_protocol_thrift_common_SquareEmblem> emblems;
	14: optional SquareJoinMethod joinMethod;
	 1: MID mid;
	 2: string name;
	 3: string welcomeMessage;
	 4: string profileImageObsHash;
	 5: string desc;
	 6: bool searchable;
	 7: com_linecorp_square_protocol_thrift_common_SquareType type;
	 8: i32 categoryId;
	 9: string invitationURL;
	10: Revision revision;
}

struct SquareActivityScore{
	 1: SquareCleanScore cleanScore;
}

struct SquareAuthority{
	12: com_linecorp_square_protocol_thrift_common_SquareMemberRole createSquareChatAnnouncement;
	13: optional com_linecorp_square_protocol_thrift_common_SquareMemberRole updateMaxChatMemberCount;
	 1: MID squareMid;
	 2: com_linecorp_square_protocol_thrift_common_SquareMemberRole updateSquareProfile;
	 3: com_linecorp_square_protocol_thrift_common_SquareMemberRole inviteNewMember;
	 4: com_linecorp_square_protocol_thrift_common_SquareMemberRole approveJoinRequest;
	 5: com_linecorp_square_protocol_thrift_common_SquareMemberRole createPost;
	 6: com_linecorp_square_protocol_thrift_common_SquareMemberRole createOpenSquareChat;
	 7: com_linecorp_square_protocol_thrift_common_SquareMemberRole deleteSquareChatOrPost;
	 8: com_linecorp_square_protocol_thrift_common_SquareMemberRole removeSquareMember;
	 9: com_linecorp_square_protocol_thrift_common_SquareMemberRole grantRole;
	10: com_linecorp_square_protocol_thrift_common_SquareMemberRole enableInvitationTicket;
	11: Revision revision;
}

struct SquareChat{
	 1: MID squareChatMid;
	 2: MID squareMid;
	 3: com_linecorp_square_protocol_thrift_common_SquareChatType type;
	 4: string name;
	 5: string chatImageObsHash;
	 6: Revision squareChatRevision;
	 7: i32 maxMemberCount;
	 8: com_linecorp_square_protocol_thrift_common_SquareChatState state;
	 9: optional string invitationUrl;
}

struct SquareChatAnnouncement{
	 1: i64 announcementSeq;
	 2: com_linecorp_square_protocol_thrift_common_SquareChatAnnouncementType type;
	 3: SquareChatAnnouncementContents contents;
	 4: optional Timestamp createdAt;
	 5: optional MID creator;
}

struct SquareChatAnnouncementContents{
	 1: TextMessageAnnouncementContents textMessageAnnouncementContents;
}

struct SquareChatMember{
	 1: MID squareMemberMid;
	 2: MID squareChatMid;
	 3: Revision revision;
	 4: com_linecorp_square_protocol_thrift_common_SquareChatMembershipState membershipState;
	 5: bool notificationForMessage;
	 6: optional bool notificationForNewMember;
}

struct SquareChatStatus{
	 3: SquareMessage lastMessage;
	 4: string senderDisplayName;
	 5: SquareChatStatusWithoutMessage otherStatus;
}

struct SquareChatStatusWithoutMessage{
	 1: i32 memberCount;
	 2: i32 unreadMessageCount;
	 3: optional string markedAsReadMessageId;
	 4: optional string mentionedMessageId;
	 5: optional com_linecorp_square_protocol_thrift_common_NotifiedMessageType notifiedMessageType;
}

struct SquareCleanScore{
	 1: double score;
}

exception SquareException{
	 1: com_linecorp_square_protocol_thrift_common_SquareErrorCode errorCode;
	 2: optional ErrorExtraInfo errorExtraInfo;
	 3: string reason;
}

struct SquareFeature{
	 1: com_linecorp_square_protocol_thrift_common_SquareFeatureControlState controlState;
	 2: optional com_linecorp_square_protocol_thrift_common_BooleanState booleanValue;
}

struct SquareFeatureSet{
	 1: MID squareMid;
	 2: Revision revision;
	11: optional SquareFeature creatingSecretSquareChat;
	12: optional SquareFeature invitingIntoOpenSquareChat;
	13: optional SquareFeature creatingSquareChat;
}

struct SquareInfo{
	 1: Square square;
	 2: SquareStatus squareStatus;
	 3: optional NoteStatus squareNoteStatus;
}

struct SquareJoinMethod{
	 1: com_linecorp_square_protocol_thrift_common_SquareJoinMethodType type;
	 2: SquareJoinMethodValue value;
}

struct SquareJoinMethodValue{
	 1: optional ApprovalValue approvalValue;
	 2: optional CodeValue codeValue;
}

struct SquareMember{
	 1: MID squareMemberMid;
	 2: MID squareMid;
	 3: string displayName;
	 4: string profileImageObsHash;
	 5: bool ableToReceiveMessage;
	 7: com_linecorp_square_protocol_thrift_common_SquareMembershipState membershipState;
	 8: com_linecorp_square_protocol_thrift_common_SquareMemberRole role;
	 9: Revision revision;
	10: optional SquarePreference preference;
	11: optional string joinMessage;
}

struct SquareMemberRelation{
	 1: com_linecorp_square_protocol_thrift_common_SquareMemberRelationState state;
	 2: Revision revision;
}

struct SquareMessage{
	 1: Message message;
	 3: h0_a_e_a_b_ve fromType;
	 4: Revision squareMessageRevision;
	 5: optional com_linecorp_square_protocol_thrift_common_SquareMessageState state;
}

struct SquareMessageInfo{
	 1: SquareMessage message;
	 2: Square square;
	 3: SquareChat chat;
	 4: SquareMember sender;
}

struct SquarePreference{
	 1: Timestamp favoriteTimestamp;
	 2: bool notiForNewJoinRequest;
}

struct SquareStatus{
	 1: i32 memberCount;
	 2: optional i32 joinRequestCount;
	 3: optional Timestamp lastJoinRequestAt;
	 4: i32 openChatCount;
}

struct SquareVisibility{
	 1: bool common;
	 2: bool search;
}

struct TextMessageAnnouncementContents{
	 1: string messageId;
	 2: string text;
	 3: MID senderSquareMemberMid;
	 4: Timestamp createdAt;
	 5: optional MID senderMid;
}

struct UserRestrictionExtraInfo{
	 1: string linkUrl;
}

exception AccountEapConnectException{
	 1: g_a_b_e0_a_a_a_a_s code;
	 2: string alertMessage;
	11: optional WebAuthDetails webAuthDetails;
}

struct ConnectEapAccountRequest{
	 1: string authSessionId;
}

struct Device{
	 1: string udid;
	 2: string deviceModel;
}

struct DisconnectEapAccountRequest{
	 1: g_a_b_e0_a_a_a_a_r eapType;
}

struct EapLogin{
	 1: g_a_b_e0_a_a_a_a_r type;
	 2: string accessToken;
}

struct OpenSessionRequest{
	 1: Device device;
}

struct OpenSessionResponse{
	 1: string authSessionId;
}

struct VerifyEapLoginRequest{
	 1: string authSessionId;
	 2: EapLogin eapLogin;
}

struct VerifyEapLoginResponse{
	 1: bool accountExists;
}

struct WebAuthDetails{
	 1: string baseUrl;
	 2: string token;
}

struct AccountIdentifier{
	 1: g_a_b_e0_a_b_b type;
	 2: string identifier;
	11: optional string countryCode;
}

exception AuthException{
	 1: g_a_b_e0_a_b_h code;
	 2: string alertMessage;
	11: optional WebAuthDetails webAuthDetails;
}

struct Device{
	 1: string udid;
	 2: string deviceModel;
}

struct EncryptedPassword{
	 1: g_a_b_e0_a_b_g encryptionKeyVersion;
	 2: string cipherText;
}

struct ExchangeEncryptionKeyRequest{
	 1: g_a_b_e0_a_b_g authKeyVersion;
	 2: string publicKey;
	 3: string nonce;
}

struct ExchangeEncryptionKeyResponse{
	 1: string publicKey;
	 2: string nonce;
}

struct GetAcctVerifMethodResponse{
	 1: g_a_b_e0_a_b_c availableMethod;
	 2: bool sameAccountFromAuthFactor;
}

struct GetCountryInfoResponse{
	 1: string countryCode;
	 2: bool countryInEEA;
	 3: set<string> countrySetOfEEA;
}

struct GetPhoneVerifMethodResponse{
	 1: list<g_a_b_e0_a_b_t> availableMethods;
	 3: string prettifiedPhoneNumber;
}

struct GetSecondAuthMethodResponse{
	 1: g_a_b_e0_a_b_l1 secondAuthMethod;
}

struct GetUserProfileResponse{
	 1: UserProfile userProfile;
}

struct IssueWebAuthDetailsForAcctVerifResponse{
	 1: WebAuthDetails webAuthDetails;
}

struct IssueWebAuthDetailsForSecondAuthResponse{
	 1: WebAuthDetails webAuthDetails;
}

struct MigratePrimaryResponse{
	 1: string authToken;
}

struct OpenSessionRequest{
	 1: map<string,string> metaData;
}

struct RegisterPrimaryResponse{
	 1: string authToken;
}

struct SendPinCodeForPhoneResponse{
	 1: list<g_a_b_e0_a_b_t> availableMethods;
}

struct SimCard{
	 1: string countryCode;
	 2: string hni;
	 3: string carrierName;
}

struct SocialLogin{
	 1: g_a_b_e0_a_b_q1 type;
	 2: string accessToken;
	 3: string countryCode;
}

struct UserPhoneNumber{
	 1: string phoneNumber;
	 2: string countryCode;
}

struct UserProfile{
	 1: string displayName;
	 2: string profileImageUrl;
}

struct VerifyAccountUsingPwdResponse{
	 2: UserProfile userProfile;
}

struct VerifyPhoneResponse{
	 2: bool accountExist;
	 3: bool sameUdidFromAccount;
	11: optional UserProfile userProfile;
}

struct VerifySocialLoginResponse{
	 2: bool accountExist;
	11: optional UserProfile userProfile;
	12: bool sameUdidFromAccount;
}

struct WebAuthDetails{
	 1: string baseUrl;
	 2: string token;
}

struct CancelPinCodeRequest{
	 1: string authSessionId;
}

struct GetLoginActorContextRequest{
	 1: string authSessionId;
}

struct GetLoginActorContextResponse{
	 1: string appType;
	 2: string accessLocation;
}

exception SecondaryQrCodeException{
	 1: g_a_b_e0_a_c_a_c code;
	 2: string alertMessage;
}

struct VerifyPinCodeRequest{
	 1: string authSessionId;
	 2: string pinCode;
}

struct VerifyQrCodeRequest{
	 1: string authSessionId;
	 2: map<string,string> metaData;
}

struct BalanceInfo{
	25: ResponseToken responseToken;
	 3: Money balanceLimit;
	12: Money rechargeableAmount;
	13: DisplayMoney balanceAmount;
	16: MoneyRange bankChargeRange;
	17: MoneyRange atmChargeRange;
	18: MoneyRange convenienceStoreChargeRange;
	19: MoneyRange eachPayRange;
	20: MoneyRange eachTransferRange;
	21: MoneyRange eachWithdrawRange;
	22: MoneyRange balanceNotifySetupRange;
	23: MoneyRange eachTransferRequestRange;
	24: MoneyRange debitCardChargeRange;
}

struct BankBranchInfo{
	 1: string branchId;
	 2: string branchCode;
	 3: string name;
	 4: string name2;
}

struct BankInfo{
	 1: i64 bankId;
	 2: string financialCorpId;
	 3: string financialCorpCode;
	 4: g_a_b_e0_a_d_d type;
	 5: string name;
	 6: string imageUrl;
	 7: string name2;
	 8: string preCreationText;
}

struct CheckOperationResult{
	 1: bool tradable;
	 2: string reason;
	 3: string detailMessage;
}

struct CreatedPaymentUserInfoEx{
	 1: bool carryOverAvailable;
}

struct DisplayMoney{
	 1: Money amount;
	 2: string amountString;
	 3: string currency;
}

struct LinePayAccountInfo{
	 1: g_a_b_e0_a_d_q accountType;
	 2: string accountId;
	 3: string nickname;
	 4: g_a_b_e0_a_d_p status;
	 5: string financialCorporationName;
	 6: string realAccountNo;
	 7: string currency;
	 8: g_a_b_e0_a_d_c accountProductType;
	 9: string branchName;
	10: bool withdraw;
	11: bool deposit;
	12: string ownerName;
	13: string imageUrl;
	14: bool primary;
	15: string accountProductName;
	16: bool holderNameRegistered;
	17: g_a_b_e0_a_d_k0 cardBrand;
	18: string debitImageUrl;
	19: bool lineCard;
	20: string lineCardImageId;
	21: string textColor;
	22: string placeholderColor;
	23: string backgroundColor;
	24: set<g_a_b_e0_a_d_s> extendedFeatures;
}

struct MoneyRange{
	 1: Money min;
	 2: Money max;
}

struct PayInvitationInfo{
	 1: string invitationId;
	 2: g_a_b_e0_a_d_v invitationType;
	 3: string message;
	 4: Timestamp createDate;
	 5: list<PayInvitationUserInfo> receivedInfo;
}

struct PayInvitationUserInfo{
	 1: string lineMemberId;
}

struct PayInvoiceSetting{
	 1: string regexp;
	 2: i32 maxLength;
}

struct PayStatusInfo{
	 1: g_a_b_e0_a_d_z status;
}

struct PayWithdrawStaticMenu{
	 1: string title;
	 2: PaymentUrlId urlKey;
	 3: string imageUrl;
}

struct PaymentAddressSearchResult{
	 1: string state;
	 2: string address1;
}

struct PaymentAuthenticationInfo{
	 1: string authToken;
	 2: string confirmMessage;
}

struct PaymentAvailableAuth{
	 1: list<g_a_b_e0_a_d_e0> methods;
	 2: string authToken;
}

struct PaymentCacheableSettings{
	 1: map<g_a_b_e0_a_d_rc,Timestamp> timestamps;
	 2: map<g_a_b_e0_a_d_o1,list<PaymentCountrySettingMenu>> menus;
	 3: map<PaymentUrlId,PaymentUrlInfo> urls;
	 4: map<g_a_b_e0_a_d_gd,list<PaymentUrlId>> urlGroups;
	 5: map<g_a_b_e0_a_d_wc,list<PaymentTosUrlBundle>> tosUrlBundles;
	 6: list<PaymentCardValidationRule> cardValidationRules;
	 7: map<g_a_b_e0_a_d_m1,map<string,string>> messages;
	 8: PaymentMyCode myCode;
	 9: PayInvoiceSetting invoice;
	10: map<g_a_b_e0_a_d_t,map<string,string>> features;
}

struct PaymentCancellationInfo{
	 1: g_a_b_e0_a_d_qd transactionType;
	 3: Timestamp cancelDate;
	 4: DisplayMoney cancelAmount;
	 5: DisplayMoney remainAmount;
}

struct PaymentCardValidationRule{
	 2: string regex;
	 3: string grouping;
	 4: i32 maxLength;
	 5: string cardBrandName;
	 6: string securityCodeHelp;
	 7: g_a_b_e0_a_d_k0 cardBrand;
}

struct PaymentCountrySettingInfoEx{
	 3: i32 asyncWaitTimeout;
	 4: bool creditcardSupport;
	 5: PaymentCybsInfo cybs;
	 6: bool crossBorderTransfer;
	 7: g_a_b_e0_a_d_d0 addressSearchType;
	 8: list<PaymentCountrySettingMenu> menu;
	 9: list<g_a_b_e0_a_d_k> depositMethods;
	10: map<PaymentUrlId,PaymentUrlInfo> urls;
	11: map<g_a_b_e0_a_d_gd,list<PaymentUrlId>> urlGroups;
	12: bool paygEnabled;
	13: PaymentCountrySettingLimitInfo limit;
	14: bool emailRequired;
	15: map<g_a_b_e0_a_d_wc,list<PaymentTosUrlBundle>> tosUrlBundles;
	16: g_a_b_e0_a_d_v1 registrationType;
	17: bool pointSupport;
	18: string registrationUrl;
	19: string introUrl;
	20: bool touchIdMenuAvailable;
	21: bool myCodePasswordRequired;
	22: map<g_a_b_e0_a_d_jd,list<PayWithdrawStaticMenu>> settingWithdrawStaticMenu;
	 1: bool balanceSupport;
	 2: g_a_b_e0_a_d_o0 balanceType;
}

struct PaymentCountrySettingLimitInfo{
	 1: i32 depositBank;
	 2: i32 withdrawalBank;
	 3: i32 possessionOfCards;
}

struct PaymentCountrySettingMenu{
	 6: string name;
	 7: g_a_b_e0_a_d_t0 linkType;
	 8: g_a_b_e0_a_d_s0 badgeType;
	 9: string androidImageUrl;
	10: string iosImageUrl;
	11: string androidLinkUrl;
	12: string androidPackageName;
	13: string iosLinkUrl;
	14: string androidStoreUrl;
	15: string iosStoreUrl;
	17: i64 sequence;
	18: g_a_b_e0_a_d_n1 displayType;
	16: i64 id;
	 1: g_a_b_e0_a_d_u0 type;
	 2: i32 order;
	 3: string imgUrl;
	 4: string touchImgUrl;
	 5: string linkUrl;
}

struct PaymentCybsInfo{
	 1: string merchantId;
	 2: string orgId;
	 3: string serverUrl;
}

struct PaymentDetailInfo{
	10: string merchantTelNo;
	11: string merchantRepresentative;
	12: list<PaymentCancellationInfo> cancelList;
	13: DisplayMoney moneyAmount;
	14: string accountNickname;
	15: string merchantEmail;
	16: Timestamp confirmDate;
	17: string merchantLabel;
	 1: TransactionId transactionId;
	 2: Timestamp transactionDate;
	 3: g_a_b_e0_a_d_qd transactionType;
	 4: string productName;
	 6: g_a_b_e0_a_d_p1 paymethod;
	 7: string cardCorporation;
	 8: string maskedCardNumber;
	 9: string merchantName;
}

struct PaymentEligibleFriendStatus{
	 1: MID mid;
	 2: g_a_b_e0_a_d_m status;
}

exception PaymentException{
	 1: g_a_b_e0_a_d_y0 errorCode;
	 2: string debugReason;
	 3: string serverDefinedMessage;
	 4: map<string,string> errorDetailMap;
}

struct PaymentFlowTypeCustom{
	 1: string view;
	 2: list<PaymentFlowTypeCustomElement> elements;
}

struct PaymentFlowTypeCustomElement{
	 1: string id;
	 2: string value;
	 3: string style;
	 4: string regularExpression;
	 5: bool visible;
	 6: string uri;
}

struct PaymentFlowTypeInfo{
	 1: g_a_b_e0_a_d_b1 flowType;
	 2: g_a_b_e0_a_d_f0 authType;
	 3: map<g_a_b_e0_a_d_r1,list<string>> handleableOps;
	 4: list<PaymentFlowTypeCustom> customs;
}

struct PaymentLineCardInfo{
	 1: string designCode;
	 2: string imageUrl;
}

struct PaymentLineCardIssueForm{
	 1: g_a_b_e0_a_d_wc requiredTermsOfServiceBundle;
	 2: list<PaymentLineCardInfo> availableLineCards;
}

struct PaymentMyCode{
	 1: string shortcutUrl;
	 2: string shortcutIconUrl;
	 3: string shortcutIconText;
	 4: string shortcutSchemeUrl;
}

struct PaymentPointInfo{
	 1: DisplayMoney point;
	 2: bool needInquiry;
}

struct PaymentRegionalInfo{
	 1: ThRegionalInfo th;
}

struct PaymentRequiredAgreementsInfo{
	 1: string title;
	 2: string desc;
	 3: string linkName;
	 4: string linkUrl;
	 5: list<PaymentUrlId> newAgreements;
}

struct PaymentSettingsMenuInfo{
	 1: string certificationStatus;
	 2: string memberGradeType;
	 3: bool recieveMoneyEnabled;
	 4: list<PaymentSettingsMenuInfoAccount> accounts;
	 5: string bankAccountSettingUrl;
	 6: bool lineCardUser;
}

struct PaymentSettingsMenuInfoAccount{
	 1: string financialCorporationName;
	 2: string accountNo;
	 4: string imageUrl;
}

struct PaymentTTSPinCodeVerificationInfo{
	 1: bool authPasswordRequired;
	 2: string message;
}

struct PaymentTosUrlBundle{
	 1: list<PaymentUrlId> urls;
	 2: string prefixText;
}

struct PaymentTradeInfo{
	14: string helpUrl;
	15: string guideMessage;
	 1: RequestId chargeRequestId;
	 2: g_a_b_e0_a_d_yc chargeRequestType;
	 3: Timestamp chargeRequestYmdt;
	 4: string tradeNumber;
	 7: string agencyNo;
	 8: string confirmNo;
	 9: Timestamp expireYmd;
	10: DisplayMoney moneyAmount;
	11: Timestamp completeYmdt;
	12: string paymentProcessCorp;
	13: g_a_b_e0_a_d_zc status;
}

struct PaymentTransactionHistoryInfo{
	 1: string message;
	 2: g_a_b_e0_a_d_bd type;
	 3: Timestamp createdDate;
	 4: g_a_b_e0_a_d_g1 destination;
}

struct PaymentTransferRequest{
	 1: Money amount;
	 2: MID receivedLineMemberId;
}

struct PaymentTransferTargetInfo{
	 1: string name;
	 2: string accountNo;
	 3: string referenceNo;
	 4: string lineMemberId;
}

struct PaymentUrlInfo{
	 1: string url;
	 2: bool mustScroll;
	 3: string pageTitle;
	 4: string label;
	 5: string labelJoin;
	 6: bool acceptanceRequired;
	 7: string labelDesc;
}

struct PaymentUserInfoDigest{
	 1: PaymentID userId;
	 2: g_a_b_e0_a_d_md status;
	 3: string country;
	 4: g_a_b_e0_a_d_jd grade;
	 5: g_a_b_e0_a_d_s1 passwordVersion;
	 6: bool joined;
}

struct PaymentUserJobInfo{
	 1: string jobId;
	 2: string jobName;
}

struct RSAEncryptedLoginInfo{
	 1: RSAEncryptedString loginId;
	 2: RSAEncryptedString loginPassword;
}

struct RSAEncryptedPassword{
	 1: string encrypted;
	 2: RSAKeyName keyName;
}

struct ThRegionalInfo{
	 1: string firstName;
	 2: string lastName;
	 3: string identificationNo;
	 4: g_a_b_e0_a_d_i1 identificationType;
}

struct TransferRequestInfo{
	11: g_a_b_e0_a_d_dd status;
	13: list<TransferRequestReceivedInfo> requestReceivedInfo;
	14: map<string,string> messageMetadata;
	15: DisplayMoney moneyAmount;
	16: i32 totalMemberCount;
	17: i32 startNum;
	18: string messageId;
	19: i32 otherMemberCount;
	 1: string requestId;
	 2: g_a_b_e0_a_d_ed requestType;
	 3: MID requestLineMemberId;
	 4: string requestLineUserNickname;
	 5: MID receiveLineMemberId;
	 6: string receiveLineUserNickname;
	 9: string sendMessage;
	10: Timestamp requestDate;
}

struct TransferRequestReceivedInfo{
	 1: string requestId;
	 2: g_a_b_e0_a_d_ed requestType;
	 3: MID receiveLineMemberId;
	 4: string receiveLineUserNickname;
	 7: string sendMessage;
	 8: Timestamp requestDate;
	 9: g_a_b_e0_a_d_dd status;
	10: DisplayMoney moneyAmount;
}

struct UnregisterAvailabilityInfo{
	 1: g_a_b_e0_a_d_ud result;
	 2: string message;
}

struct AddFriendData{
	 1: string mid;
}

struct AdditionalInfoItem{
	 1: string id;
	 2: AdditionalInfoType type;
	 3: string title;
	 4: string descr;
	 5: string iconUrl;
	 6: string link;
}

struct AutocompleteCandidate{
	 1: string candidate;
}

struct AutocompleteRequest{
	 1: string query;
	 2: string region;
	 3: CollectionType source;
	 4: string sid;
}

struct AutocompleteResult{
	 1: list<string> modifiedQueries;
	 2: list<AutocompleteCandidate> candidates;
}

struct ButtonActionData{
	 1: optional AddFriendData addFriendData;
	 2: optional InstallAppData installAppData;
	 3: optional JumpUrlData jumpUrlData;
}

struct CategoryItem{
	 1: CollectionType collection;
	 2: i32 categoryId;
	 3: string name;
}

struct GeoAddressItem{
	 1: double latitude;
	 2: double longitude;
	 3: string displayAddress;
}

struct InstallAppData{
	 1: map<string,string> installData;
}

struct KeywordInfo{
	 1: string keyword;
	 2: string iconPath;
	 3: string label;
	 4: bool locationInfoAgreement;
}

struct Notice{
	 1: NoticeType type;
	 2: string notice;
	 3: Timestamp startTime;
	 4: Timestamp endTime;
}

struct PortalSearchCollection{
	 1: string name;
}

struct PortalSearchSummary{
	 1: string link;
	 2: list<PortalSearchCollection> collections;
}

struct SearchCommonParameter{
	 1: double latitude;
	 2: double longitude;
	 3: string source;
	 4: string region;
	 5: optional string sid;
	 6: QueryType queryType;
	 7: optional UserEvent userEvent;
}

exception SearchException{
	 1: g_a_b_e0_a_e_q code;
	 2: string reason;
	 3: optional map<string,string> extra;
}

struct SearchItemUnion{
	 1: optional CategoryItem categoryItem;
	 2: optional SpotItem spotItem;
	 3: optional ProductSearchSummary productItem;
	 4: optional ServiceItem serviceItem;
	 5: optional YellowpageItem yellowpageItem;
	 6: optional BuddySearchResult oaItem;
	 7: optional GeoAddressItem geoAddressItem;
	 8: optional ShortcutItem shortcutItem;
	 9: optional SquareInfo squareItem;
	10: optional Category squareCategoryItem;
	11: optional PortalSearchSummary portalSearchSummary;
}

struct SearchPagingParameter{
	 1: CollectionType collection;
	 2: i32 start;
	 3: i32 length;
	 4: SearchCommonParameter commonParam;
}

struct SearchResult{
	 1: string sid;
	 2: list<SearchResultCollection> collections;
	 3: i32 start;
	 4: i32 length;
}

struct SearchResultCollection{
	 1: CollectionType collection;
	 2: string title;
	 3: i32 rank;
	 4: i32 hits;
	 5: list<SearchResultItem> items;
	 6: bool hasNext;
	 7: optional list<i32> categoryId;
	 8: optional string error;
	 9: string tabTitle;
	10: i32 start;
	11: i32 length;
	12: optional i32 squareCategoryId;
}

struct SearchResultItem{
	 1: string id;
	 2: ItemType type;
	 3: SearchItemUnion item;
	 4: optional string title;
	 5: optional string sub1;
	 6: optional string sub2;
	 7: optional string iconUrl;
	 8: optional string titleLink;
	 9: optional string iconLink;
	10: optional string displayTemplate;
	11: optional list<AdditionalInfoItem> additionalInfo;
}

struct SearchSection{
	 1: SearchSectionType type;
	 2: string title;
	 3: list<KeywordInfo> keywordInfos;
}

struct ServiceItem{
	 1: string id;
	 2: string title;
	 3: i32 type;
	 4: i32 subType;
	 5: string appId;
	 6: string channelId;
	 7: string badge;
	 8: string iconUrl;
	 9: string downloadUrl;
	10: string launchScheme;
	11: bool iconTint;
}

struct ShortcutButton{
	 1: string id;
	 2: optional string title;
	 3: string url;
	 4: optional string iconPath;
	 5: optional ShortcutButtonAction action;
}

struct ShortcutButtonAction{
	 1: ButtonActionType actionType;
	 2: ButtonActionData actionData;
}

struct ShortcutItem{
	 1: string id;
	 2: string title;
	 3: string descr;
	 4: string iconPath;
	 5: string url;
	 6: list<ShortcutButton> buttons;
	 7: optional ShortcutButtonAction action;
}

struct UserEvent{
	 1: bool endOfInput;
	 2: string showPortalSearchBtn;
}

struct YellowpageItem{
	12: CategoryIcon categoryIcon;
	13: list<AdditionalInfoItem> additionalInfo;
	 1: string id;
	 2: string mid;
	 3: string name;
	 4: string address;
	 5: double latitude;
	 6: double longitude;
	 7: double distance;
	 8: bool canFreeCall;
	 9: i32 countryCode;
	10: string phoneNumber;
	11: i32 categoryId;
}

struct BulkGetRequest{
	 1: set<GetRequest> requests;
}

struct BulkGetResponse{
	 1: map<KeyName,GetResponseOrError> values;
}

struct BulkSetRequest{
	 1: set<SetRequest> requests;
}

struct BulkSetResponse{
	 1: map<KeyName,SetResponseOrError> values;
}

struct GetRequest{
	 1: string keyName;
	 2: optional g_a_b_e0_a_f_s_h ns;
}

struct GetResponse{
	 1: SettingValue value;
}

struct GetResponseOrError{
	 1: GetResponse response;
	 2: struct error;
}

struct SetRequest{
	 1: string keyName;
	 2: TypedValue value;
	 3: i64 clientTimestampMillis;
	 4: optional g_a_b_e0_a_f_s_h ns;
	 5: optional string transactionId;
}

struct SetResponse{
	 1: SettingValue value;
	 2: string updateTransactionId;
}

struct SetResponseOrError{
	 1: SetResponse response;
	 2: struct error;
}

struct SettingValue{
	 1: TypedValue value;
	 2: i64 updateTimeMillis;
	 3: optional g_a_b_e0_a_f_s_i scope;
	 4: optional string scopeKey;
}

exception SettingsException{
	 1: g_a_b_e0_a_f_s_n code;
	 2: string reason;
	 3: map<string,string> parameters;
}

struct TypedValue{
	 1: bool booleanValue;
	 2: i64 i64Value;
	 3: string stringValue;
	 4: list<string> stringListValue;
	 5: list<i64> i64ListValue;
	 6: string rawJsonStringValue;
	 7: byte i8Value;
	 8: i16 i16Value;
	 9: i32 i32Value;
	10: double doubleValue;
	11: list<byte> i8ListValue;
	12: list<i16> i16ListValue;
	13: list<i32> i32ListValue;
}

struct BinaryScenarioActionResult{
	 1: string bytes;
}

struct BleNotificationReceivedTrigger{
	 1: Uuid serviceUuid;
	 2: Uuid characteristicUuid;
}

struct BleProduct{
	 1: Uuid serviceUuid;
	 2: Uuid psdiServiceUuid;
	 3: Uuid psdiCharacteristicUuid;
	 4: string name;
	 5: string profileImageLocation;
	 6: bool bondingRequired;
}

struct DeviceLinkRequest{
	 1: DeviceId deviceId;
}

struct DeviceLinkResponse{
	 1: i64 latestOffset;
}

struct DeviceUnlinkRequest{
	 1: DeviceId deviceId;
}

struct GattReadAction{
	 1: Uuid serviceUuid;
	 2: Uuid characteristicUuid;
}

struct GattWriteAction{
	 1: Uuid serviceUuid;
	 2: Uuid characteristicUuid;
	 3: string data;
}

struct GetBleDeviceRequest{
	 1: Uuid serviceUuid;
	 2: HexDigitString psdi;
}

struct GetPredefinedScenarioSetsRequest{
	 1: list<DeviceId> deviceIds;
}

struct GetPredefinedScenarioSetsResponse{
	 1: map<DeviceId,ScenarioSet> scenarioSets;
}

struct NotifyScenarioExecutedRequest{
	 2: list<ScenarioResult> scenarioResults;
}

struct Scenario{
	 1: ScenarioId id;
	 2: ScenarioTrigger trigger;
	 3: list<ScenarioAction> actions;
}

struct ScenarioAction{
	 1: GattReadAction gattRead;
	 2: GattWriteAction gattWrite;
	 3: SleepAction sleep;
	 4: DisconnectAction disconnect;
	 5: StopNotificationAction stopNotification;
}

struct ScenarioActionResult{
	 1: VoidScenarioActionResult voidResult;
	 2: BinaryScenarioActionResult binaryResult;
}

struct ScenarioResult{
	 1: ScenarioId scenarioId;
	 2: DeviceId deviceId;
	 3: i64 revision;
	 4: Timestamp startTime;
	 5: Timestamp endTime;
	 6: g_a_b_i0_a_a_v code;
	 7: optional string errorReason;
	 8: optional string bleNotificationPayload;
	 9: list<ScenarioActionResult> actionResults;
	10: ConnectionId connectionId;
}

struct ScenarioSet{
	 1: list<Scenario> scenarios;
	 2: bool autoClose;
	 3: i64 suppressionInterval;
	 4: i64 revision;
	 5: Timestamp modifiedTime;
}

struct ScenarioTrigger{
	 1: ImmediateTrigger immediate;
	 2: BleNotificationReceivedTrigger bleNotificationReceived;
}

struct SleepAction{
	 1: i64 sleepMillis;
}

struct StopNotificationAction{
	 1: Uuid serviceUuid;
	 2: Uuid characteristicUuid;
}

struct ThingsDevice{
	 1: DeviceId deviceId;
	 2: string actionUri;
	 3: optional Mid botMid;
	 4: g_a_b_i0_a_a_q productType;
	 5: string providerName;
	 6: string profileImageLocation;
	 7: optional list<string> channelIdList;
	 8: i16 targetABCEngineVersion;
	 9: optional Uuid serviceUuid;
	10: optional bool bondingRequired;
}

exception ThingsException{
	 1: g_a_b_i0_a_a_b0 code;
	 2: string reason;
}

struct UserDevice{
	 1: ThingsDevice device;
	 2: string deviceDisplayName;
}

struct BeaconBackgroundNotification{
	 1: i64 actionInterval;
	 2: optional list<BeaconCondition> actionAndConditions;
	 3: i64 actionDelay;
	 4: optional list<list<BeaconCondition>> actionConditions;
}

struct BeaconCondition{
	 1: MID inFriends;
	 2: MID notInFriends;
	 3: bool termsAgreed;
}

struct BeaconLayerInfoAndActions{
	 1: string pictureUrl;
	 2: string label;
	 3: string text;
	 4: list<string> actions;
	 5: optional list<BeaconCondition> showOrConditions;
	 6: optional list<list<BeaconCondition>> showConditions;
	 7: i64 timeToHide;
}

struct BeaconQueryResponse{
	10: string minor;
	11: double effectiveRange;
	12: optional list<string> channelWhiteList;
	13: i64 actionId;
	14: optional i64 stayReportInterval;
	15: i64 leaveThresholdTime;
	17: double touchThreshold;
	18: i16 cutoffThreshold;
	 2: list<string> deprecated_actionUrls;
	 3: i64 cacheTtl;
	 4: optional BeaconTouchActions touchActions;
	 5: optional BeaconLayerInfoAndActions layerInfoAndActions;
	 6: optional BeaconBackgroundNotification backgroundEnteringNotification;
	 7: optional BeaconBackgroundNotification backgroundLeavingNotification;
	 8: string group;
	 9: string major;
}

struct BeaconTouchActions{
	 1: list<string> actions;
}

struct Rssi{
	 1: i32 value;
}

exception TalkException{
	 1: g_a_b_p_a_a_a_a_t code;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

exception BotException{
	 1: g_a_b_q_a_a_a errorCode;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

struct GetSquareBotRequest{
	 1: MID botMid;
}

struct GetSquareBotResponse{
	 1: SquareBot squareBot;
}

struct SquareBot{
	 1: MID botMid;
	 2: bool active;
	 3: string displayName;
	 4: string profileImageObsHash;
	 5: i32 iconType;
	 6: i64 lastModifiedAt;
	 7: i64 expiredIn;
}

struct Chatapp{
	 1: string chatappId;
	 2: string name;
	 3: string icon;
	 4: string url;
	 5: list<g_a_e0_a_a_a> availableChatTypes;
}

exception ChatappException{
	 1: g_a_e0_a_a_d code;
	 2: string reason;
}

struct GetChatappRequest{
	 1: string chatappId;
	 2: string language;
}

struct GetChatappResponse{
	 1: Chatapp app;
}

struct GetMyChatappsRequest{
	 1: string language;
	 2: optional string continuationToken;
}

struct GetMyChatappsResponse{
	 1: list<MyChatapp> apps;
	 2: optional string continuationToken;
}

struct MyChatapp{
	 1: Chatapp app;
	 2: g_a_e0_a_a_c category;
	 3: optional i64 priority;
}

struct LiffAdvertisingId{
	 1: optional string advertisingId;
	 2: optional bool tracking;
}

struct LiffChatContext{
	 1: string chatMid;
}

struct LiffContext{
	 1: LiffNoneContext none;
	 2: LiffChatContext chat;
	 3: LiffSquareChatContext squareChat;
}

struct LiffDeviceSetting{
	 1: optional bool videoAutoPlayAllowed;
	 2: optional LiffAdvertisingId advertisingId;
}

struct LiffErrorConsentRequired{
	 1: string channelId;
	 2: string consentUrl;
}

struct LiffErrorPayload{
	 3: LiffErrorConsentRequired consentRequired;
}

exception LiffException{
	 1: g_a_i_t0_a_e code;
	 2: string message;
	 3: optional LiffErrorPayload payload;
}

struct LiffSquareChatContext{
	 1: string squareChatMid;
}

struct LiffView{
	 8: optional i32 titleButtonColor;
	 5: optional i32 titleBackgroundColor;
	 9: optional i32 progressBarColor;
	10: optional i32 progressBackgroundColor;
	12: optional bool suspendable;
	16: optional bool suspendableV2;
	13: optional bool maxBrightness;
	14: optional i32 titleButtonAreaBackgroundColor;
	15: optional i32 titleButtonAreaBorderColor;
	17: optional g_a_i_t0_a_k menuStyle;
	18: optional bool moduleMode;
	19: optional i32 pinToHomeServiceId;
	 1: string type;
	 2: string url;
	11: bool trustedDomain;
	 6: optional string titleIconUrl;
	 4: optional i32 titleTextColor;
	 7: optional i32 titleSubtextColor;
}

struct LiffViewRequest{
	 1: string liffId;
	 3: string lang;
	 2: LiffContext context;
	 4: optional LiffDeviceSetting deviceSetting;
}

struct LiffViewResponse{
	 1: LiffView view;
	 2: optional string contextToken;
	 3: optional string accessToken;
	 4: optional string featureToken;
	 5: optional list<g_a_i_t0_a_i> features;
	 6: string channelId;
	 7: optional string idToken;
	 8: optional list<string> scopes;
	 9: optional list<g_a_i_t0_a_j> launchOptions;
}

struct RevokeTokenRequest{
	 1: optional string accessToken;
}

struct GetHomeServiceListResponse{
	 1: list<HomeService> services;
	 2: list<i32> fixedServiceIds;
	 3: list<i32> pinnedServiceCandidateIds;
	 4: list<HomeCategory> categories;
}

struct HomeCategory{
	 1: i32 id;
	 2: string title;
	 3: list<i32> ids;
}

struct HomeService{
	 1: i32 id;
	 2: string title;
	 3: string serviceEntryUrl;
	 4: optional string storeUrl;
	 5: string iconUrl;
	 6: optional string pictogramIconUrl;
	 7: Timestamp badgeUpdatedTimeMillis;
	 8: optional g_a_n0_a_a_a_a_a_a badgeType;
}

exception HomeException{
	 1: g_a_n0_a_a_a_b_a exceptionCode;
	 2: string message;
}

struct BalanceShortcut{
	 1: bool osPayment;
	 2: i32 iconPosition;
	 3: string iconUrl;
	 4: string iconText;
	 5: string iconAltText;
	 6: string linkUrl;
	 7: string tsTargetId;
}

struct BalanceShortcutInfo{
	 1: list<BalanceShortcut> balanceShortcuts;
	 2: BalanceShortcut osPaymentFallbackShortcut;
}

struct CurrencyProperty{
	 1: string code;
	 2: string symbol;
	 3: g_a_t1_v_d position;
	 4: i32 scale;
}

struct GetBalanceSummaryResponse{
	 1: LinePayInfo payInfo;
	 2: LinePointInfo pointInfo;
	 3: LineCoinInfo coinInfo;
}

struct GetBalanceSummaryResponseV2{
	 1: optional LinePayInfo payInfo;
	 2: optional list<LinePayPromotion> payPromotions;
	 3: optional MyRank myRank;
	 4: optional LinePointInfo pointInfo;
	 5: optional BalanceShortcutInfo balanceShortcutInfo;
}

struct GetModuleRequest{
	 1: string id;
	 2: optional string etag;
	 3: optional string recommendedModelId;
}

struct GetModuleResponse{
	 1: ModuleResponse moduleResponse;
	 2: NotModified notModified;
	 3: NotFound notFound;
}

struct GetModulesRequest{
	 1: optional string etag;
}

struct GetModulesRequestV2{
	 1: optional string etag;
}

struct GetModulesResponse{
	 1: ModuleAggregationResponse moduleAggregationResponse;
	 2: NotModified notModified;
}

struct GetModulesResponseV2{
	 1: ModuleAggregationResponseV2 moduleAggregationResponse;
	 2: NotModified notModified;
}

struct GetSmartChannelRecommendationsRequest{
	 1: i32 maxResults;
	 2: string placement;
	 3: bool testMode;
}

struct GetSmartChannelRecommendationsResponse{
	 1: list<SmartChannelRecommendation> smartChannelRecommendations;
	 2: i32 minInterval;
	 3: string requestId;
}

struct IpassTokenProperty{
	 1: string token;
	 2: string tokenIssuedTimestamp;
}

struct LineCoinInfo{
	 1: string balanceAmount;
	 2: string historyUrl;
}

struct LinePayInfo{
	 1: string balanceAmount;
	 2: CurrencyProperty currencyProperty;
	 3: g_a_t1_v_u payMemberStatus;
	 4: string applicationUrl;
	 5: string chargeUrl;
	 6: g_a_t1_v_t payMemberGrade;
	 7: string country;
	 8: string referenceNumber;
	 9: optional IpassTokenProperty ipassTokenProperty;
}

struct LinePayPromotion{
	 1: string mainText;
	 2: optional string subText;
	 3: optional string buttonText;
	 4: optional string iconUrl;
	 5: string linkUrl;
	 6: string tsTargetId;
}

struct LinePointInfo{
	 1: string balanceAmount;
	 2: string applicationUrl;
}

struct Module{
	 1: string id;
	 2: string templateName;
	 3: map<string,string> fields;
	 4: list<map<string,string>> elements;
	 5: string etag;
	 6: i32 refreshTimeSec;
	 7: string name;
	 8: bool recommendable;
	 9: optional string recommendedModelId;
}

struct ModuleAggregationResponse{
	 1: list<Module> modules;
	 2: string etag;
	 3: i32 refreshTimeSec;
}

struct ModuleAggregationResponseV2{
	 1: list<Module> fixedModules;
	 2: string etag;
	 3: i32 refreshTimeSec;
	 4: list<Module> recommendedModules;
}

struct ModuleResponse{
	 1: Module moduleInstance;
}

struct MyRank{
	 1: g_a_t1_v_d0 rankType;
	 2: string rankName;
	 3: string iconUrl;
	 4: string linkUrl;
	 5: MyRankBenefit myRankBenefit;
}

struct MyRankBenefit{
	 1: string rewardCouponCount;
	 2: string rewardCouponCountLinkUrl;
	 3: string payReturnPointRate;
	 4: string payReturnPointRateLinkUrl;
}

struct SmartChannelRecommendation{
	 1: i32 minDisplayDuration;
	 2: string title;
	 3: string descriptionText;
	 4: string labelText;
	 5: string imageUrl;
	 6: string bgColorCode;
	 7: string linkUrl;
	 8: string impEventUrl;
	 9: string clickEventUrl;
	10: string muteEventUrl;
	11: string upvoteEventUrl;
	12: string downvoteEventUrl;
}

exception WalletException{
	 1: g_a_t1_v_h0 code;
	 2: string reason;
	 3: map<string,string> attributes;
}

struct Admission{
	 1: Timestamp admissionTime;
}

struct GetReservationRequest{
	 1: string reservationNumber;
}

struct GetReservationResponse{
	 1: Reservation reservation;
}

struct GetReservationsRequest{
	 1: Timestamp lastFetchTimeStamp;
}

struct GetReservationsResponse{
	 1: list<Reservation> reservations;
}

struct NotifyEnteringRequest{
	 1: list<string> ticketIds;
}

struct NotifyEnteringResponse{
	 1: Timestamp admissionTime;
}

struct ReturnTicketRequest{
	 1: string reservationNumber;
}

struct ReturnTicketResponse{
	 1: Timestamp returnTicketTime;
}

exception TicketException{
	 1: ErrorCode code;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

struct AddProductToSubscriptionSlotRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
	 3: optional string oldProductId;
	 4: optional h0_a_a_c_a_a_q3 subscriptionService;
}

struct AddProductToSubscriptionSlotResponse{
	 1: h0_a_a_c_a_a_r3 result;
}

struct AggregatedCategory{
	 1: i64 id;
	 2: h0_a_a_c_a_a_i categoryType;
	 3: string name;
	 4: i32 productCount;
	 5: string thumbnailUrl;
}

struct ApplicationVersionRange{
	 1: string lowerBound;
	 2: bool lowerBoundInclusive;
	 3: string upperBound;
	 4: bool upperBoundInclusive;
}

struct AutoSuggestionShowcaseRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: optional h0_a_a_c_a_a_w3 suggestionType;
}

struct AutoSuggestionShowcaseResponse{
	 1: list<ProductSummaryForAutoSuggest> productList;
	 2: i64 totalSize;
}

struct BrowsingHistory{
	 1: ProductSearchSummary productSearchSummary;
	 2: Timestamp browsingTime;
}

struct BuyMustbuyRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
	 3: string serialNumber;
}

struct ChangeSubscriptionRequest{
	 1: string billingItemId;
	 2: h0_a_a_c_a_a_q3 subscriptionService;
	 3: h0_a_a_c_a_a_j3 storeCode;
}

struct ChangeSubscriptionResponse{
	 1: h0_a_a_c_a_a_l3 result;
	 2: string orderId;
	 3: string confirmUrl;
}

struct CustomizeImageTextRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
	 3: ImageTextRequestEntry nameRequestEntry;
}

struct CustomizeImageTextResponse{
	 1: ImageTextProperty nameTextProperty;
}

struct DemographicType{
	 1: h0_a_a_c_a_a_o demographicGenderType;
	 2: h0_a_a_c_a_a_n demographicAgeType;
}

struct DetailedProductList{
	 1: list<ProductDetail> productList;
	 2: i32 offset;
	 3: i32 totalSize;
}

struct DynamicHomeNativeRequest{
	 1: h0_a_a_c_a_a_v1 productType;
}

struct DynamicHomeNativeResponse{
	 1: list<ListContent> listContents;
}

struct EditorsPickBanner{
	 1: i64 id;
	 2: string imageUrl;
	 3: string homeBannerImageUrl;
	 4: string showcaseBannerImageUrl;
	 5: list<h0_a_a_c_a_a_u> enableEditorsPickShowcaseTypes;
	 6: h0_a_a_c_a_a_u defaulteditorsPickShowcaseType;
	 7: string homeBannerV2ImageUrl;
	 8: string name;
	 9: bool containsProducts;
	10: Timestamp displayPeriodBegin;
	11: string description;
	12: bool showNewBadge;
}

struct EstablishE2EESessionRequest{
	 1: string clientPublicKey;
}

struct EstablishE2EESessionResponse{
	 1: string sessionId;
	 2: string serverPublicKey;
	 3: Timestamp expireAt;
}

struct FindRestorablePlanRequest{
	 1: h0_a_a_c_a_a_q3 subscriptionService;
	 2: list<string> storeOrderIds;
}

struct FindRestorablePlanResponse{
	 1: h0_a_a_c_a_a_l3 result;
	 2: string billingItemId;
	 3: string storeOrderId;
	 4: string originalStoreOrderId;
	 5: string orderId;
	 6: string mid;
}

struct GetBrowsingHistoryRequest{
	 1: set<h0_a_a_c_a_a_v1> productTypes;
	 2: optional string continuationToken;
	 3: optional i32 limit;
	 4: optional ShopFilter shopFilter;
}

struct GetBrowsingHistoryResponse{
	 1: list<BrowsingHistory> browsingHistory;
	 2: string continuationToken;
	 3: i32 totalSize;
}

struct GetOldSticonMappingRequest{
	 1: Timestamp lastUpdatedTimeMillis;
}

struct GetOldSticonMappingResponse{
	 1: list<SticonProductMapping> sticonProductMappings;
	 2: Timestamp updatedTimeMillis;
	 3: bool updated;
}

struct GetProductRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
	 3: optional string carrierCode;
	 4: optional bool saveBrowsingHistory;
}

struct GetProductResponse{
	 1: ProductDetail productDetail;
}

struct GetProductSummariesInSubscriptionSlotsRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: optional string continuationToken;
	 3: optional i32 limit;
}

struct GetProductSummariesInSubscriptionSlotsResponse{
	 1: list<ProductSummary> products;
	 2: string continuationToken;
	 3: i64 totalSize;
	 4: i32 maxSlotCount;
}

struct GetRecommendOaRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
}

struct GetRecommendOaResponse{
	 1: list<string> buddyMids;
}

struct GetRecommendationRequest{
	 1: string continuationToken;
	 2: i32 limit;
	 3: h0_a_a_c_a_a_v1 productType;
	 4: h0_a_a_c_a_a_o2 recommendationType;
	 5: optional string productId;
	 6: optional set<h0_a_a_c_a_a_t3> subtypes;
	 7: bool shouldShuffle;
	 8: optional bool includeStickerIds;
	 9: optional ShopFilter shopFilter;
}

struct GetRecommendationResponse{
	 1: optional list<ProductSearchSummary> results;
	 2: string continuationToken;
	 3: i64 totalSize;
}

struct GetResourceFileReponse{
	 1: optional GetTagClusterFileResponse tagClusterFileResponse;
}

struct GetResourceFileRequest{
	 1: optional GetTagClusterFileRequest tagClusterFileRequest;
}

struct GetStudentInformationResponse{
	 1: StudentInformation studentInformation;
	 2: bool isValid;
}

struct GetSubscriptionPlansRequest{
	 1: h0_a_a_c_a_a_q3 subscriptionService;
	 2: h0_a_a_c_a_a_j3 storeCode;
}

struct GetSubscriptionPlansResponse{
	 1: list<SubscriptionPlan> plans;
}

struct GetSubscriptionStatusResponse{
	 1: map<h0_a_a_c_a_a_q3,SubscriptionStatus> subscriptions;
	 2: bool hasValidStudentInformation;
}

struct GetSuggestDictionarySettingResponse{
	 1: list<SuggestDictionarySetting> results;
}

struct GetSuggestResourcesV2Request{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: list<string> productIds;
}

struct GetSuggestResourcesV2Response{
	 1: map<string,SuggestResource> suggestResources;
}

struct GetTagClusterFileResponse{
	 1: string path;
	 2: Timestamp updatedTimeMillis;
}

struct ImageTextProperty{
	 1: h0_a_a_c_a_a_b1 status;
	 2: optional string plainText;
	 3: optional i32 nameTextMaxCharacterCount;
	 4: optional string encryptedText;
}

struct ImageTextRequestEntry{
	 1: string text;
}

struct LatestProductByAuthorItem{
	 1: string productId;
	 2: string displayName;
	 3: i64 version;
	 4: bool newFlag;
	 5: ProductResourceType productResourceType;
}

struct LatestProductsByAuthorRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: i64 authorId;
	 3: i32 limit;
}

struct LatestProductsByAuthorResponse{
	 1: i64 authorId;
	 2: string author;
	 3: list<LatestProductByAuthorItem> items;
}

struct ListContent{
	 1: ListContentData contentData;
	 2: optional string localizedTitle;
	 3: optional string tsKey;
	 4: optional string moreLinkFragment;
}

struct ListContentData{
	 1: optional ShowcaseV3 showcase;
	 2: optional list<EditorsPickBanner> editorsPickBanners;
	 3: optional list<AggregatedCategory> categories;
}

struct Locale{
	 1: string language;
	 2: string country;
}

struct LpPromotionProperty{
	 1: string landingPageUrl;
	 2: string label;
}

struct Price{
	 1: string currency;
	 2: string amount;
	 3: string priceString;
}

struct ProductDetail{
	93: string authorId;
	94: h0_a_a_c_a_a_c3 stickerResourceType;
	95: ProductProperty productProperty;
	96: h0_a_a_c_a_a_q1 productSalesState;
	97: Timestamp installedTime;
	101: optional ProductWishProperty wishProperty;
	102: ProductSubscriptionProperty subscriptionProperty;
	103: optional ProductPromotionProperty productPromotionProperty;
	 1: string id;
	 2: string billingItemId;
	 5: string billingCpId;
	 3: string type;
	 4: h0_a_a_c_a_a_t3 subtype;
	11: string name;
	12: string author;
	13: string details;
	14: string copyright;
	15: string notice;
	16: PromotionInfo promotionInfo;
	21: i64 latestVersion;
	22: string latestVersionString;
	23: i64 version;
	24: string versionString;
	25: ApplicationVersionRange applicationVersionRange;
	31: bool owned;
	32: bool grantedByDefault;
	41: i32 validFor;
	42: Timestamp validUntil;
	51: bool onSale;
	52: set<string> salesFlags;
	53: bool availableForPresent;
	54: bool availableForMyself;
	61: i32 priceTier;
	62: Price price;
	63: string priceInLineCoin;
	64: Price localizedPrice;
	91: map<string,list<string>> images;
	92: map<string,string> attributes;
}

struct ProductList{
	 1: list<ProductDetail> productList;
	 2: i32 offset;
	 3: i32 totalSize;
	11: string title;
}

struct ProductListByAuthorRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string authorId;
	 3: i32 offset;
	 4: i32 limit;
	 5: optional ShopFilter shopFilter;
}

struct ProductPromotionProperty{
	 1: LpPromotionProperty lpPromotionProperty;
}

struct ProductResourceType{
	 1: optional h0_a_a_c_a_a_c3 stickerResourceType;
	 2: optional h0_a_a_c_a_a_y3 themeResourceType;
	 3: optional h0_a_a_c_a_a_h3 sticonResourceType;
}

struct ProductSubscriptionProperty{
	 1: bool availableForSubscribe;
	 2: h0_a_a_c_a_a_k1 subscriptionAvailability;
}

struct ProductSummary{
	 1: string id;
	11: string name;
	21: i64 latestVersion;
	25: ApplicationVersionRange applicationVersionRange;
	32: bool grantedByDefault;
	92: map<string,string> attributes;
	93: ProductTypeSummary productTypeSummary;
	94: Timestamp validUntil;
	95: i32 validFor;
	96: Timestamp installedTime;
	97: h0_a_a_c_a_a_k1 availability;
	98: string authorId;
}

struct ProductSummaryForAutoSuggest{
	 1: string id;
	 2: i64 version;
	 3: string name;
	 4: h0_a_a_c_a_a_c3 stickerResourceType;
	 5: i64 suggestVersion;
}

struct ProductSummaryList{
	 1: list<ProductSummary> productList;
	 2: i32 offset;
	 3: i32 totalSize;
}

struct ProductTypeSummary{
	 1: optional StickerSummary stickerSummary;
	 2: optional ThemeSummary themeSummary;
	 3: optional SticonSummary sticonSummary;
}

struct ProductValidationRequest{
	 1: ProductValidationScheme validationScheme;
	10: string authCode;
}

struct ProductValidationResult{
	 1: bool validated;
}

struct ProductValidationScheme{
	10: string key;
	11: i64 offset;
	12: i64 size;
}

struct ProductWishProperty{
	 1: i64 totalCount;
}

struct PromotionBuddyInfo{
	 1: string buddyMid;
}

struct PromotionDetail{
	 1: PromotionBuddyInfo promotionBuddyInfo;
	 2: PromotionInstallInfo promotionInstallInfo;
	 3: PromotionMissionInfo promotionMissionInfo;
}

struct PromotionInfo{
	 1: h0_a_a_c_a_a_h2 promotionType;
	51: PromotionBuddyInfo buddyInfo;
	 2: PromotionDetail promotionDetail;
}

struct PromotionInstallInfo{
	 1: string downloadUrl;
	 2: string customUrlSchema;
}

struct PromotionMissionInfo{
	 1: h0_a_a_c_a_a_g2 promotionMissionType;
	 2: bool missionCompleted;
	 3: string downloadUrl;
	 4: string customUrlSchema;
}

struct PurchaseOrder{
	 1: string shopId;
	 2: string productId;
	 5: string recipientMid;
	11: Price price;
	12: bool enableLinePointAutoExchange;
	21: Locale locale;
	31: map<string,string> presentAttributes;
}

struct PurchaseOrderResponse{
	 1: string orderId;
	11: map<string,string> attributes;
	12: string billingConfirmUrl;
}

struct PurchaseRecord{
	 1: ProductDetail productDetail;
	11: Timestamp purchasedTime;
	21: string giver;
	22: string recipient;
	31: Price purchasedPrice;
}

struct PurchaseRecordList{
	 1: list<PurchaseRecord> purchaseRecords;
	 2: i32 offset;
	 3: i32 totalSize;
}

struct PurchaseSubscriptionRequest{
	 1: string billingItemId;
	 2: h0_a_a_c_a_a_q3 subscriptionService;
	 3: h0_a_a_c_a_a_j3 storeCode;
	 4: optional string storeOrderId;
}

struct PurchaseSubscriptionResponse{
	 1: h0_a_a_c_a_a_l3 result;
	 2: string orderId;
	 3: string confirmUrl;
}

struct RemoveProductFromSubscriptionSlotRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: string productId;
	 3: optional h0_a_a_c_a_a_q3 subscriptionService;
}

struct RemoveProductFromSubscriptionSlotResponse{
	 1: h0_a_a_c_a_a_r3 result;
}

struct SaveStudentInformationRequest{
	 1: StudentInformation studentInformation;
}

exception ShopException{
	 1: h0_a_a_c_a_a_t2 code;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

struct ShopFilter{
	 1: optional set<h0_a_a_c_a_a_k1> productAvailabilities;
	 2: optional set<h0_a_a_c_a_a_d3> stickerSizes;
}

struct ShopUpdates{
	 1: string shopId;
	11: Timestamp latestUpdateTime;
}

struct ShowcaseRequest{
	 1: h0_a_a_c_a_a_v1 productType;
	 2: h0_a_a_c_a_a_y2 showcaseType;
	 3: h0_a_a_c_a_a_t3 subType;
	 4: string continuationToken;
	 5: i32 limit;
	 6: optional set<ProductResourceType> productResourceTypes;
	 7: optional DemographicType demographicType;
}

struct ShowcaseV3{
	 1: list<ProductSearchSummary> productList;
	 2: optional string continuationToken;
	 3: i64 totalSize;
	 4: optional h0_a_a_c_a_a_y2 showcaseType;
	 5: optional h0_a_a_c_a_a_v1 productType;
	 6: optional h0_a_a_c_a_a_t3 subType;
	 7: optional DemographicType demographicType;
}

struct StickerIdRange{
	 1: i64 start;
	 2: i32 size;
}

struct StickerProperty{
	 1: bool hasAnimation;
	 2: bool hasSound;
	 3: bool hasPopup;
	 4: h0_a_a_c_a_a_c3 stickerResourceType;
	 5: string stickerOptions;
	 6: i32 compactStickerOptions;
	 7: string stickerHash;
	 9: list<string> stickerIds;
	10: optional ImageTextProperty nameTextProperty;
	11: optional bool availableForPhotoEdit;
	12: optional map<string,string> stickerDefaultTexts;
	13: optional h0_a_a_c_a_a_d3 stickerSize;
}

struct StickerSummary{
	 1: list<StickerIdRange> stickerIdRanges;
	 2: optional i64 suggestVersion;
	 3: string stickerHash;
	 4: optional bool defaultDisplayOnKeyboard;
	 5: h0_a_a_c_a_a_c3 stickerResourceType;
	 6: optional ImageTextProperty nameTextProperty;
	 7: optional bool availableForPhotoEdit;
}

struct SticonProductMapping{
	 1: string productId;
	 2: string oldProductId;
	 3: map<string,string> newToOldSticonIdMapping;
	 4: i32 oldPackageVersion;
	 5: i32 oldMetaVersion;
	 6: i64 stickerPackageId;
	 7: i32 stickerPackageVersion;
	 8: map<string,string> stickerIds;
}

struct SticonProperty{
	 2: list<string> sticonIds;
	 3: optional bool availableForPhotoEdit;
	 4: optional h0_a_a_c_a_a_h3 sticonResourceType;
}

struct SticonSummary{
	 1: optional i64 suggestVersion;
	 2: optional bool availableForPhotoEdit;
}

struct StudentInformation{
	 1: string schoolName;
	 2: string graduationDate;
}

struct SubscriptionPlan{
	 1: string billingItemId;
	 2: h0_a_a_c_a_a_q3 subscriptionService;
	 3: h0_a_a_c_a_a_o3 target;
	 4: h0_a_a_c_a_a_p3 type;
	 5: string period;
	 6: string freeTrial;
	 7: string localizedName;
	 8: Price price;
	 9: h0_a_a_c_a_a_n3 availability;
	10: string cpId;
	11: string nameKey;
}

struct SubscriptionStatus{
	 1: string billingItemId;
	 2: h0_a_a_c_a_a_q3 subscriptionService;
	 3: string period;
	 4: string localizedName;
	 5: bool freeTrial;
	 6: bool expired;
	 7: Timestamp validUntil;
	 8: i32 stickerSlotCount;
	 9: h0_a_a_c_a_a_o3 target;
	10: h0_a_a_c_a_a_p3 type;
	11: h0_a_a_c_a_a_j3 storeCode;
	12: string nameKey;
}

struct SuggestDictionarySetting{
	 1: string language;
	 2: string name;
	 3: optional bool preload;
	 4: SuggestResource suggestResource;
	 5: optional map<i64,string> patch;
	 6: SuggestResource suggestTagResource;
	 7: optional map<i64,string> tagPatch;
}

struct SuggestResource{
	 1: string dataUrl;
	 2: i64 version;
	 3: i64 updatedTime;
}

struct ThemeProperty{
	 1: string thumbnailUrl;
	 2: h0_a_a_c_a_a_y3 themeResourceType;
}

struct AbuseMessage{
	 1: i64 messageId;
	 2: string message;
	 3: string senderMid;
	 4: h0_a_e_a_b_lb contentType;
	 5: Timestamp createdTime;
	 6: map<string,string> metadata;
}

struct AbuseReport{
	 1: h0_a_e_a_b_jh reportSource;
	 2: h0_a_e_a_b_w applicationType;
	 3: list<h0_a_e_a_b_fi> spammerReasons;
	 4: list<AbuseMessage> abuseMessages;
	 5: map<string,string> metadata;
}

struct AcceptChatInvitationByTicketRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
	 3: string ticketId;
}

struct AcceptChatInvitationRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
}

struct AgeCheckDocomoResult{
	 1: string authUrl;
	 2: h0_a_e_a_b_d30 userAgeType;
}

struct AgeCheckRequestResult{
	 1: string authUrl;
	 2: string sessionId;
}

struct AnalyticsInfo{
	 1: double gaSamplingRate;
	 2: string tmid;
}

struct ApprovedChannelInfo{
	 1: ChannelInfo channelInfo;
	 2: Timestamp approvedAt;
}

struct ApprovedChannelInfos{
	 1: list<ApprovedChannelInfo> approvedChannelInfos;
	 2: Timestamp revision;
}

struct AuthKeyExchangeRequest{
	 1: h0_a_e_a_b_b0 authKeyVersion;
	 2: string publicKey;
	 3: string nonce;
}

struct AuthKeyExchangeResponse{
	 1: string publicKey;
	 2: string nonce;
}

struct AuthLoginRequest{
	 1: h0_a_e_a_b_e0 authLoginVersion;
	 2: map<string,string> metaData;
	 3: string cipherText;
}

struct AuthLoginResponse{
	 1: map<string,string> metaData;
	 2: string cipherText;
}

struct AuthSessionRequest{
	 1: map<string,string> metaData;
}

struct AvatarProfile{
	 1: string version;
	 2: Timestamp updatedMillis;
	 3: string thumbnail;
}

struct Balance{
	 1: string currentPointsFixedPointDecimal;
}

struct BuddyChatBar{
	 1: list<BuddyChatBarItem> barItems;
}

struct BuddyChatBarItem{
	 1: BuddyRichMenuChatBarItem rich;
	 2: BuddyWidgetListCharBarItem widgetList;
	 3: BuddyWebChatBarItem web;
}

struct BuddyDetail{
	 1: string mid;
	 2: i64 memberCount;
	 3: bool onAir;
	 4: bool businessAccount;
	 5: bool addable;
	 6: set<h0_a_e_a_b_lb> acceptableContentTypes;
	 7: bool capableMyhome;
	 8: bool freePhoneCallable;
	 9: string phoneNumberToDial;
	10: bool needPermissionApproval;
	11: i32 channelId;
	12: string channelProviderName;
	13: i32 iconType;
	14: h0_a_e_a_b_n2 botType;
	15: bool showRichMenu;
	16: i64 richMenuRevision;
	17: h0_a_e_a_b_u2 onAirLabel;
	27: i32 onAirVersion;
	18: bool useTheme;
	19: string themeId;
	20: bool useBar;
	21: i64 barRevision;
	22: bool useBackground;
	23: string backgroundId;
	24: bool statusBarEnabled;
	25: i64 statusBarRevision;
	26: string searchId;
	28: bool blockable;
}

struct BuddyDetailWithPersonal{
	 1: BuddyDetail buddyDetail;
	 2: BuddyPersonalDetail personalDetail;
}

struct BuddyLive{
	 1: MID mid;
	 2: bool onLive;
	 3: string title;
	 4: i64 viewerCount;
	 5: string liveUrl;
}

struct BuddyOnAir{
	12: i64 viewerCount;
	13: i64 targetCount;
	14: i64 livePlayTime;
	15: string screenAspectRate;
	31: h0_a_e_a_b_v2 onAirType;
	32: BuddyOnAirUrls onAirUrls;
	33: string aspectRatioOfSource;
	41: bool useFadingOut;
	42: optional i64 fadingOutIn;
	43: optional string urlAfterFadingOut;
	44: optional string labelAfterFadingOut;
	51: bool useLowerBanner;
	52: optional string lowerBannerUrl;
	53: optional string lowerBannerLabel;
	 1: MID mid;
	 3: i64 freshnessLifetime;
	 4: string onAirId;
	 5: bool onAir;
	11: string text;
}

struct BuddyOnAirUrls{
	 1: map<string,string> hls;
	 2: map<string,string> smoothStreaming;
}

struct BuddyPersonalDetail{
	 1: optional string richMenuId;
	 2: optional i64 statusBarRevision;
}

struct BuddyRichMenuChatBarItem{
	 1: string label;
	 2: string body;
	 3: bool selected;
}

struct BuddySearchResult{
	 1: MID mid;
	 2: string displayName;
	 3: string pictureStatus;
	 4: string picturePath;
	 5: string statusMessage;
	 6: bool businessAccount;
	 7: i32 iconType;
	 8: h0_a_e_a_b_n2 botType;
}

struct BuddyStatusBar{
	 1: string label;
	 2: h0_a_e_a_b_z4 displayType;
	 3: string title;
	 4: string iconUrl;
	 5: string linkUrl;
}

struct BuddyWebChatBarItem{
	 1: string label;
	 2: string url;
}

struct BuddyWidget{
	 1: string icon;
	 2: string label;
	 3: string url;
}

struct BuddyWidgetListCharBarItem{
	 1: string label;
	 2: list<BuddyWidget> widgets;
	 3: bool selected;
}

struct CallHost{
	 1: string host;
	 2: i32 port;
	 3: string zone;
}

struct CallRoute{
	10: optional MID toMid;
	11: optional string tunneling;
	12: optional string commParam;
	13: optional string stid;
	14: optional string encFromMid;
	15: optional string encToMid;
	 1: string fromToken;
	 2: h0_a_e_a_b_d5 callFlowType;
	 3: string voipAddress;
	 4: i32 voipUdpPort;
	 5: optional i32 voipTcpPort;
	 6: string fromZone;
	 7: string toZone;
	 8: bool fakeCall;
	 9: optional string ringbackTone;
}

struct CancelChatInvitationRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
	 3: set<MID> targetUserMids;
}

struct ChannelDomain{
	 1: string host;
	 2: bool removed;
}

struct ChannelDomains{
	 1: list<ChannelDomain> channelDomains;
	 2: Timestamp revision;
}

exception ChannelException{
	 1: h0_a_e_a_b_a7 code;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

struct ChannelIdWithLastUpdated{
	 1: ChannelId channelId;
	 2: Timestamp lastUpdated;
}

struct ChannelInfo{
	12: list<h0_a_e_a_b_x6> channelConfigurations;
	13: bool lcsAllApiUsable;
	14: set<h0_a_e_a_b_g7> allowedPermissions;
	15: list<ChannelDomain> channelDomains;
	16: Timestamp updatedTimestamp;
	17: set<h0_a_e_a_b_c7> featureLicenses;
	 1: ChannelId channelId;
	 3: string name;
	 4: string entryPageUrl;
	 5: string descriptionText;
	 6: ChannelProvider provider;
	 7: h0_a_e_a_b_yg publicType;
	 8: string iconImage;
	 9: list<string> permissions;
	11: string iconThumbnailImage;
}

struct ChannelNotificationSetting{
	 1: ChannelId channelId;
	 2: string name;
	 3: bool notificationReceivable;
	 4: bool messageReceivable;
	 5: bool showDefault;
}

struct ChannelProvider{
	 1: string name;
	 2: optional bool certified;
}

struct ChannelSettings{
	 1: bool unapprovedMessageReceivable;
}

struct ChannelToken{
	 1: string token;
	 2: string obsToken;
	 3: i64 expiration;
	 4: string refreshToken;
	 5: string channelAccessToken;
}

struct Chat{
	 1: h0_a_e_a_b_ca type;
	 2: MID chatMid;
	 3: Timestamp createdTime;
	 4: bool notificationDisabled;
	 5: optional Timestamp favoriteTimestamp;
	 6: optional string chatName;
	 7: optional string picturePath;
	 8: Extra extra;
}

struct ChatEffectMeta{
	 1: i64 contentId;
	 2: h0_a_e_a_b_t9 category;
	 3: string name;
	 4: ChatEffectMetaContent defaultContent;
	 5: map<h0_a_e_a_b_v9,ChatEffectMetaContent> optionalContents;
	 6: set<string> keywords;
	 7: Timestamp beginTimeMillis;
	 8: Timestamp endTimeMillis;
	 9: Timestamp createdTimeMillis;
	10: Timestamp updatedTimeMillis;
}

struct ChatEffectMetaContent{
	 1: string url;
	 2: string checksum;
}

struct ChatRoomAnnouncement{
	 1: i64 announcementSeq;
	 2: h0_a_e_a_b_aa type;
	 3: ChatRoomAnnouncementContents contents;
	 4: MID creatorMid;
	 5: Timestamp createdTime;
	 6: optional h0_a_e_a_b_z9 deletePermission;
}

struct ChatRoomAnnouncementContentMetadata{
	 1: optional string replace;
	 2: optional string sticonOwnership;
}

struct ChatRoomAnnouncementContents{
	 1: i32 displayFields;
	 2: string text;
	 3: optional string link;
	 4: optional string thumbnail;
	 5: optional ChatRoomAnnouncementContentMetadata contentMetadata;
}

struct ChatRoomBGM{
	 1: MID creatorMid;
	 2: Timestamp createdTime;
	 3: string chatRoomBGMInfo;
}

struct ClientNetworkStatus{
	 1: h0_a_e_a_b_ea networkType;
}

struct Coin{
	 1: i32 freeCoinBalance;
	 2: i32 payedCoinBalance;
	 3: i32 totalCoinBalance;
	 4: i32 rewardCoinBalance;
}

struct CoinHistory{
	 1: i64 payDate;
	 2: i32 coinBalance;
	 3: i32 coin;
	 4: string price;
	 5: string title;
	 6: bool refund;
	 7: string paySeq;
	 8: string currency;
	 9: string currencySign;
	10: string displayPrice;
	11: CoinPayLoad payload;
	12: string channelId;
}

struct CoinHistoryCondition{
	 1: ItemIndex start;
	 2: Count size;
	 3: string language;
	 4: string eddt;
	 5: h0_a_e_a_b_ag appStoreCode;
}

struct CoinHistoryResult{
	 1: list<CoinHistory> historys;
	 2: Coin balance;
	 3: bool hasNext;
}

struct CoinPayLoad{
	 1: i32 payCoin;
	 2: i32 freeCoin;
	 3: h0_a_e_a_b_xf type;
	 4: i32 rewardCoin;
}

struct CoinProductItem{
	 1: string itemId;
	 2: i32 coin;
	 3: i32 freeCoin;
	 5: string currency;
	 6: string price;
	 7: string displayPrice;
	 8: string name;
	 9: string desc;
}

struct CoinPurchaseReservation{
	 1: string productId;
	 2: string country;
	 3: string currency;
	 4: string price;
	 5: h0_a_e_a_b_ag appStoreCode;
	 6: string language;
	 7: h0_a_e_a_b_yf pgCode;
	 8: string redirectUrl;
}

struct CoinUseReservation{
	 1: ChannelId channelId;
	 2: string shopOrderId;
	 3: h0_a_e_a_b_ag appStoreCode;
	 4: list<CoinUseReservationItem> items;
	 5: string country;
}

struct CoinUseReservationItem{
	 1: string itemId;
	 2: string itemName;
	 3: i32 amount;
}

struct Configurations{
	 1: i64 revision;
	 2: map<string,string> configMap;
}

struct Contact{
	 1: MID mid;
	 2: Timestamp createdTime;
	10: h0_a_e_a_b_kb type;
	11: h0_a_e_a_b_jb status;
	21: h0_a_e_a_b_hb relation;
	22: string displayName;
	23: string phoneticName;
	24: string pictureStatus;
	25: string thumbnailUrl;
	26: string statusMessage;
	27: string displayNameOverridden;
	28: i64 favoriteTime;
	31: bool capableVoiceCall;
	32: bool capableVideoCall;
	33: bool capableMyhome;
	34: bool capableBuddy;
	35: i32 attributes;
	36: i64 settings;
	37: string picturePath;
	38: string recommendParams;
	39: h0_a_e_a_b_dd friendRequestStatus;
	40: string musicProfile;
	42: string videoProfile;
	43: map<string,string> statusMessageContentMetadata;
	44: optional AvatarProfile avatarProfile;
}

struct ContactModification{
	 1: h0_a_e_a_b_bf type;
	 2: string luid;
	11: list<string> phones;
	12: list<string> emails;
	13: list<string> userids;
	14: optional string mobileContactName;
	15: optional string phoneticName;
}

struct ContactRegistration{
	10: string luid;
	11: h0_a_e_a_b_kb contactType;
	12: string contactKey;
	 1: Contact contact;
}

struct CreateChatRequest{
	 1: RequestSequence reqSeq;
	 2: h0_a_e_a_b_ca type;
	 3: optional string name;
	 4: set<MID> targetUserMids;
	 5: optional string picturePath;
}

struct CreateChatResponse{
	 1: Chat chat;
}

struct DeleteOtherFromChatRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
	 3: set<MID> targetUserMids;
}

struct DeleteSelfFromChatRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
	 3: optional Timestamp lastSeenMessageDeliveredTime;
	 4: optional string lastSeenMessageId;
	 5: optional Timestamp lastMessageDeliveredTime;
	 6: optional string lastMessageId;
}

struct DeviceInfo{
	20: h0_a_e_a_b_w applicationType;
	 1: string deviceName;
	 2: string systemName;
	 3: string systemVersion;
	 4: string model;
	10: h0_a_e_a_b_w6 carrierCode;
	11: string carrierName;
	 5: optional string webViewVersion;
}

struct E2EEGroupSharedKey{
	 1: i32 keyVersion;
	 2: i32 groupKeyId;
	 3: MID creator;
	 4: i32 creatorKeyId;
	 5: MID receiver;
	 6: i32 receiverKeyId;
	 7: string encryptedSharedKey;
	 8: set<h0_a_e_a_b_lb> allowedTypes;
	 9: i32 specVersion;
}

struct E2EEKey{
	 1: i32 version;
	 2: i32 keyId;
	 4: string publicKey;
	 5: string privateKey;
	 6: Timestamp createdTime;
}

struct E2EEKeyChain{
	 1: list<E2EEKey> keychain;
}

struct E2EENegotiationResult{
	 1: set<h0_a_e_a_b_lb> allowedTypes;
	 2: E2EEPublicKey publicKey;
	 3: i32 specVersion;
}

struct E2EEPublicKey{
	 1: i32 version;
	 2: i32 keyId;
	 4: string keyData;
	 5: Timestamp createdTime;
}

struct EmailConfirmationResult{
	 1: string certificate;
}

struct EmailConfirmationSession{
	 1: h0_a_e_a_b_fc emailConfirmationType;
	 2: string verifier;
	 3: string targetEmail;
}

struct ExtendedMessageBox{
	 1: required MID id;
	 2: h0_a_e_a_b_ve midType;
	 4: MessageBoxV2MessageId lastDeliveredMessageId;
	 5: optional i64 lastSeenMessageId;
	 6: optional i64 unreadCount;
	 7: optional list<Message> lastMessages;
	 8: optional i64 lastRemovedMessageId;
	 9: optional Timestamp lastRemovedTime;
}

struct ExtendedProfile{
	 1: ExtendedProfileBirthday birthday;
}

struct ExtendedProfileBirthday{
	 1: string year;
	 2: h0_a_e_a_b_qg yearPrivacyLevelType;
	 3: bool yearEnabled;
	 5: string day;
	 6: h0_a_e_a_b_qg dayPrivacyLevelType;
	 7: bool dayEnabled;
}

struct Extra{
	 1: GroupExtra groupExtra;
	 2: PeerExtra peerExtra;
}

struct FindChatByTicketRequest{
	 1: string ticketId;
}

struct FindChatByTicketResponse{
	 1: Chat chat;
}

struct FollowBuddyDetail{
	 1: i32 iconType;
}

struct FollowMid{
	 1: MID mid;
	 2: string eMid;
}

struct FollowProfile{
	 1: FollowMid followMid;
	 2: string displayName;
	 3: string picturePath;
	 4: bool following;
	 5: bool allowFollow;
	 6: optional FollowBuddyDetail followBuddyDetail;
}

struct FollowRequest{
	 1: FollowMid followMid;
}

struct FriendRequest{
	 1: string eMid;
	 2: MID mid;
	 3: h0_a_e_a_b_bd direction;
	 4: h0_a_e_a_b_cd method;
	 5: string param;
	 6: Timestamp timestamp;
	 7: i64 seqId;
	10: string displayName;
	11: string picturePath;
	12: string pictureStatus;
}

struct FriendRequestsInfo{
	 1: i32 totalIncomingCount;
	 2: i32 totalOutgoingCount;
	 3: list<FriendRequest> recentIncomings;
	 4: list<FriendRequest> recentOutgoings;
	 5: i32 totalIncomingLimit;
	 6: i32 totalOutgoingLimit;
}

struct Geolocation{
	 1: double longitude;
	 2: double latitude;
	 3: optional GeolocationAccuracy accuracy;
	 4: optional double altitudeMeters;
	 5: optional double velocityMetersPerSecond;
	 6: optional double bearingDegrees;
}

struct GeolocationAccuracy{
	 1: double radiusMeters;
	 2: double radiusConfidence;
	 3: optional double altitudeAccuracy;
	 4: optional double velocityAccuracy;
	 5: optional double bearingAccuracy;
}

struct GetAllChatMidsRequest{
	 1: optional bool withMemberChats;
	 2: optional bool withInvitedChats;
}

struct GetAllChatMidsResponse{
	 1: set<MID> memberChatMids;
	 2: set<MID> invitedChatMids;
}

struct GetBalanceResponse{
	 1: Balance balance;
}

struct GetBuddyChatBarRequest{
	 1: MID buddyMid;
	 2: i64 chatBarRevision;
	 3: string richMenuId;
}

struct GetBuddyLiveRequest{
	 1: MID mid;
}

struct GetBuddyLiveResponse{
	 1: BuddyLive info;
	 2: i64 refreshedIn;
}

struct GetBuddyStatusBarV2Request{
	 1: MID botMid;
	 2: i64 revision;
}

struct GetChatsRequest{
	 1: list<MID> chatMids;
	 2: optional bool withMembers;
	 3: optional bool withInvitees;
}

struct GetChatsResponse{
	 1: list<Chat> chats;
}

struct GetCoinHistoryRequest{
	 1: h0_a_e_a_b_ag appStoreCode;
	 2: string country;
	 3: string language;
	 4: string searchEndDate;
	 5: optional i32 offset;
	 6: optional i32 limit;
}

struct GetCoinHistoryResponse{
	 1: list<CoinHistory> histories;
	 2: Coin balance;
	 3: i32 offset;
	 4: bool hasNext;
}

struct GetCoinProductsRequest{
	 1: h0_a_e_a_b_ag appStoreCode;
	 2: string country;
	 3: string language;
	 4: optional h0_a_e_a_b_yf pgCode;
}

struct GetCoinProductsResponse{
	 1: list<CoinProductItem> items;
}

struct GetEncryptedIdentityV3Response{
	 1: string wrappedNonce;
	 2: string kdfParameter1;
	 3: string kdfParameter2;
}

struct GetFollowersRequest{
	 1: FollowMid followMid;
	 2: optional string cursor;
}

struct GetFollowersResponse{
	 1: list<FollowProfile> profiles;
	 2: optional string cursor;
	 3: i64 followingCount;
	 4: i64 followerCount;
}

struct GetFollowingsRequest{
	 1: FollowMid followMid;
	 2: optional string cursor;
}

struct GetFollowingsResponse{
	 1: list<FollowProfile> profiles;
	 2: optional string cursor;
	 3: i64 followingCount;
	 4: i64 followerCount;
}

struct GetPreviousMessagesV2Request{
	 1: string messageBoxId;
	 2: MessageBoxV2MessageId endMessageId;
	 3: Count messagesCount;
	 4: optional bool withReadCount;
	 5: optional bool receivedOnly;
}

struct GetTotalCoinBalanceRequest{
	 1: h0_a_e_a_b_ag appStoreCode;
}

struct GetTotalCoinBalanceResponse{
	 1: string totalBalance;
	 2: string paidCoinBalance;
	 3: string freeCoinBalance;
	 4: string rewardCoinBalance;
	 5: string expectedAutoExchangedCoinBalance;
}

struct Group{
	40: list<string> memberMids;
	41: list<string> inviteeMids;
	 1: MID id;
	 2: Timestamp createdTime;
	10: string name;
	11: string pictureStatus;
	12: bool preventedJoinByTicket;
	13: GroupPreference groupPreference;
	20: list<Contact> members;
	21: Contact creator;
	22: list<Contact> invitee;
	31: bool notificationDisabled;
	32: string picturePath;
}

struct GroupCall{
	 1: bool online;
	 2: MID chatMid;
	 3: MID hostMid;
	 4: list<MID> memberMids;
	 5: Timestamp started;
	 6: h0_a_e_a_b_fe mediaType;
	 7: h0_a_e_a_b_ge protocol;
}

struct GroupCallRoute{
	10: string fromZone;
	11: string commParam;
	12: string polarisAddress;
	13: i32 polarisUdpPort;
	14: string polarisZone;
	15: string orionAddress;
	 1: string token;
	 2: CallHost cscf;
	 3: CallHost mix;
	 4: MID hostMid;
	 5: list<string> capabilities;
	 6: h0_a_e_a_b_ge proto;
	 7: string voipAddress;
	 8: i32 voipUdpPort;
	 9: i32 voipTcpPort;
}

struct GroupExtra{
	 1: MID creator;
	 2: bool preventedJoinByTicket;
	 3: optional string invitationTicket;
	 4: map<MID,Timestamp> memberMids;
	 5: map<MID,Timestamp> inviteeMids;
}

struct GroupPreference{
	11: string invitationTicket;
	12: Timestamp favoriteTimestamp;
}

struct IdentifierConfirmationRequest{
	 1: map<string,string> metaData;
	 2: bool forceRegistration;
	 3: string verificationCode;
}

struct IdentityCredential{
	 1: h0_a_e_a_b_pe provider;
	 2: string identifier;
	 3: string password;
}

struct IdentityCredentialRequest{
	 1: map<string,string> metaData;
	 2: h0_a_e_a_b_pe identityProvider;
	 3: string cipherKeyId;
	 4: string cipherText;
	 5: IdentifierConfirmationRequest confirmationRequest;
}

struct IdentityCredentialResponse{
	 1: map<string,string> metaData;
	 2: h0_a_e_a_b_oe responseType;
	 3: string confirmationVerifier;
	 4: i64 timeoutInSeconds;
}

struct InstantNews{
	 1: i64 newsId;
	 2: string newsService;
	 3: i64 ttlMillis;
	 4: string category;
	 5: string categoryBgColor;
	 6: string categoryColor;
	 7: string title;
	 8: string url;
	 9: optional string image;
}

struct InviteIntoChatRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
	 3: set<MID> targetUserMids;
}

struct Location{
	 1: string title;
	 2: string address;
	 3: double latitude;
	 4: double longitude;
	 5: string phone;
	 6: optional string categoryId;
	 7: optional h0_a_e_a_b_jg provider;
	 8: optional GeolocationAccuracy accuracy;
	 9: optional double altitudeMeters;
}

struct Message{
	 6: Timestamp deliveredTime;
	10: string text;
	11: Location location;
	14: bool hasContent;
	15: h0_a_e_a_b_lb contentType;
	18: map<string,string> contentMetadata;
	17: string contentPreview;
	19: byte sessionId;
	20: list<string> chunks;
	21: optional string relatedMessageId;
	22: optional h0_a_e_a_b_af messageRelationType;
	23: optional i32 readCount;
	24: optional h0_a_e_a_b_th relatedMessageServiceCode;
	25: optional h0_a_e_a_b_v appExtensionType;
	 1: MID from;
	 2: MID to;
	 3: h0_a_e_a_b_ve toType;
	 4: string id;
	 5: Timestamp createdTime;
}

struct MessageBoxList{
	 1: required list<ExtendedMessageBox> messageBoxes;
	 2: required bool hasNext;
}

struct MessageBoxListRequest{
	 1: optional string minChatId;
	 2: optional string maxChatId;
	 3: bool activeOnly;
	 4: Count messageBoxCountLimit;
	 5: bool withUnreadCount;
	 6: Count lastMessagesPerMessageBoxCount;
	 7: optional bool unreadOnly;
}

struct MessageBoxV2MessageId{
	 1: Timestamp deliveredTime;
	 2: i64 messageId;
}

struct MoretabRecommend{
	 1: list<MoretabRecommendAccount> accounts;
	 2: Timestamp nextUpdateTime;
	 3: i64 cacheTtlMillis;
}

struct MoretabRecommendAccount{
	 1: MID mid;
	 2: string displayName;
	 3: string statusMessage;
	 4: string pictureStatus;
	 5: string picturePath;
}

struct NearbyEntry{
	 1: string emid;
	 2: double distance;
	 3: i32 lastUpdatedInSec;
	 4: map<string,string> property;
	 5: Profile profile;
}

struct Operation{
	 1: OpRevision revision;
	 2: Timestamp createdTime;
	 3: h0_a_e_a_b_hf type;
	 4: RequestSequence reqSeq;
	 5: string checksum;
	 7: h0_a_e_a_b_gf status;
	10: string param1;
	11: string param2;
	12: string param3;
	20: Message message;
}

struct PaidCallAdCountry{
	 1: string countryCode;
	 2: string rateDivision;
}

struct PaidCallAdResult{
	 1: i32 adRemains;
}

struct PaidCallBalance{
	 1: h0_a_e_a_b_rf productType;
	 2: string productName;
	 3: string unit;
	 4: i32 limitedPaidBalance;
	 5: i32 limitedFreeBalance;
	 6: i32 unlimitedPaidBalance;
	 7: i32 unlimitedFreeBalance;
	 8: Timestamp startTime;
	 9: Timestamp endTime;
	10: bool autopayEnabled;
}

struct PaidCallCurrencyExchangeRate{
	 1: string currencyCode;
	 2: string currencyName;
	 3: string currencySign;
	 4: bool preferred;
	 5: string coinRate;
	 6: string creditRate;
}

struct PaidCallDialing{
	 7: h0_a_e_a_b_wf callerIdStatus;
	10: i32 balance;
	11: string unit;
	12: i32 rate;
	13: string displayCode;
	14: string calledNumber;
	15: string calleeNationalNumber;
	16: string calleeCallingCode;
	17: string rateDivision;
	20: i32 adMaxMin;
	21: i32 adRemains;
	22: string adSessionId;
	 1: h0_a_e_a_b_uf type;
	 2: string dialedNumber;
	 3: string serviceDomain;
	 4: h0_a_e_a_b_rf productType;
	 5: string productName;
	 6: bool multipleProduct;
}

struct PaidCallHistory{
	10: i64 duration;
	11: i32 terminate;
	12: h0_a_e_a_b_rf productType;
	13: i32 charge;
	14: string unit;
	15: string result;
	 1: ItemIndex seq;
	 2: h0_a_e_a_b_uf type;
	 3: string dialedNumber;
	 4: string calledNumber;
	 5: MID toMid;
	 6: string toName;
	 7: Timestamp setupTime;
	 8: Timestamp startTime;
	 9: Timestamp endTime;
}

struct PaidCallHistoryResult{
	 1: list<PaidCallHistory> historys;
	 2: bool hasNext;
}

struct PaidCallMetadataResult{
	 1: list<PaidCallCurrencyExchangeRate> currencyExchangeRates;
	 2: list<string> recommendedCountryCodes;
	 3: list<PaidCallAdCountry> adCountries;
	 4: list<string> supportedCalledCountryCodes;
}

struct PaidCallRedeemResult{
	 1: string eventName;
	 2: i32 eventAmount;
}

struct PaidCallResponse{
	 1: CallHost host;
	 2: PaidCallDialing dialing;
	 3: string token;
	 4: list<SpotItem> spotItems;
}

struct PaidCallUserRate{
	 1: string countryCode;
	 2: i32 rate;
	 3: string rateDivision;
	 4: string rateName;
}

struct PaymentReservationResult{
	 1: string orderId;
	 2: string confirmUrl;
	 3: map<string,string> extras;
}

struct PendingAgreementsResponse{
	 1: list<h0_a_e_a_b_wh> pendingAgreements;
}

struct PhoneVerificationResult{
	 1: h0_a_e_a_b_n30 verificationResult;
	 2: h0_a_e_a_b_g accountMigrationCheckType;
	 3: bool recommendAddFriends;
}

struct PlaceSearchInfo{
	 1: string name;
	 2: string address;
	 3: double latitude;
	 4: double longitude;
	 5: string categoryId;
}

exception PointException{
	 1: h0_a_e_a_b_kg code;
	 2: string reason;
	 3: optional map<string,string> extra;
}

struct Profile{
	22: string pictureStatus;
	23: string thumbnailUrl;
	24: string statusMessage;
	31: bool allowSearchByUserid;
	32: bool allowSearchByEmail;
	33: string picturePath;
	34: string musicProfile;
	35: string videoProfile;
	36: map<string,string> statusMessageContentMetadata;
	37: optional AvatarProfile avatarProfile;
	 1: MID mid;
	 3: string userid;
	12: string regionCode;
	10: string phone;
	11: string email;
	20: string displayName;
	21: string phoneticName;
}

struct ProfileContent{
	 1: string value;
	 2: map<string,string> meta;
}

struct ProximityMatchCandidateEntry{
	 1: Contact contact;
	11: BuddyDetail buddyDetail;
}

struct ProximityMatchCandidateResult{
	 1: list<ProximityMatchCandidateEntry> users;
	 2: list<ProximityMatchCandidateEntry> buddies;
	91: bool endOfResult;
}

struct PushRecvReport{
	 1: PushTrackingId pushTrackingId;
	 2: Timestamp recvTimestamp;
	 3: i32 battery;
	 4: h0_a_e_a_b_m2 batteryMode;
	 5: h0_a_e_a_b_ea clientNetworkType;
	 6: string carrierCode;
	 7: optional Timestamp displayTimestamp;
}

struct RSAKey{
	 1: string keynm;
	 2: string nvalue;
	 3: string evalue;
	 4: string sessionKey;
}

struct RegisterWithPhoneNumberResult{
	 1: string authToken;
	 2: bool recommendEmailRegistration;
	 3: optional string certificate;
}

struct RegisterWithSnsIdResult{
	 1: string authToken;
	 2: bool userCreated;
	 3: bool recommendEmailRegistration;
}

struct ReissueChatTicketRequest{
	 1: RequestSequence reqSeq;
	 2: MID groupMid;
}

struct ReissueChatTicketResponse{
	 1: string ticketId;
}

struct RejectChatInvitationRequest{
	 1: RequestSequence reqSeq;
	 2: MID chatMid;
}

struct RemoveFollowerRequest{
	 1: FollowMid followMid;
}

struct RequestTokenResponse{
	 1: RequestToken requestToken;
	 2: string returnUrl;
}

struct RingbackTone{
	 1: string uuid;
	 2: string trackId;
	 3: string title;
	 4: string oid;
	 5: map<string,string> tids;
	 6: string sid;
	 7: optional string artist;
	 8: optional ChannelId channelId;
}

struct Ringtone{
	 1: string title;
	 2: string artist;
	 3: string oid;
	 4: ChannelId channelId;
}

struct Room{
	 1: MID mid;
	 2: Timestamp createdTime;
	10: list<Contact> contacts;
	31: bool notificationDisabled;
	40: list<MID> memberMids;
}

struct SIMInfo{
	 1: string phoneNumber;
	 2: string countryCode;
}

struct SecurityCenterResult{
	 1: string uri;
	 2: string token;
	 3: string cookiePath;
	 4: bool skip;
}

struct SendPostbackRequest{
	 1: string messageId;
	 2: string url;
	 3: string chatMID;
	 4: string originMID;
}

struct Settings{
	15: bool notificationIncomingCall;
	80: Timestamp agreementGdpr;
	16: string notificationSoundMessage;
	82: Timestamp agreementProvideLocation;
	17: string notificationSoundGroup;
	83: Timestamp agreementBeacon;
	18: bool notificationDisabledWithSub;
	86: Timestamp agreementContentsSuggest;
	19: bool notificationPayment;
	87: Timestamp agreementContentsSuggestDataCollection;
	68: bool notificationMention;
	90: Timestamp agreementOcrImageCollection;
	72: bool notificationThumbnail;
	93: bool notificationBadgeTalkOnly;
	20: bool privacySyncContacts;
	21: bool privacySearchByPhoneNumber;
	22: bool privacySearchByUserid;
	23: bool privacySearchByEmail;
	24: bool privacyAllowSecondaryDeviceLogin;
	25: bool privacyProfileImagePostToMyhome;
	63: bool privacyProfileMusicPostToMyhome;
	85: h0_a_e_a_b_vg privacyAllowProfileHistory;
	81: h0_a_e_a_b_ii privacyStatusMessageHistory;
	26: bool privacyReceiveMessagesFromNotFriend;
	27: bool privacyAgreeUseLineCoinToPaidCall;
	28: bool privacyAgreeUsePaidCall;
	29: bool privacyAllowFriendRequest;
	65: bool privacyAllowNearby;
	78: h0_a_e_a_b_rg privacySharePersonalInfoToFriends;
	88: h0_a_e_a_b_d30 privacyAgeResult;
	89: bool privacyAgeResultReceived;
	91: bool privacyAllowFollow;
	92: bool privacyShowFollowList;
	30: string contactMyTicket;
	40: h0_a_e_a_b_pe identityProvider;
	41: string identityIdentifier;
	42: map<h0_a_e_a_b_ci,string> snsAccounts;
	43: bool phoneRegistration;
	44: h0_a_e_a_b_ec emailConfirmationStatus;
	45: h0_a_e_a_b_h accountMigrationPincodeType;
	46: bool enforcedInputAccountMigrationPincode;
	47: h0_a_e_a_b_rh securityCenterSettingsType;
	48: bool allowUnregistrationSecondaryDevice;
	50: string preferenceLocale;
	60: map<h0_a_e_a_b_pb,string> customModes;
	61: bool e2eeEnable;
	62: bool hitokotoBackupRequested;
	66: Timestamp agreementNearbyTime;
	67: Timestamp agreementSquareTime;
	69: Timestamp botUseAgreementAcceptedAt;
	70: Timestamp agreementShakeFunction;
	71: Timestamp agreementMobileContactName;
	73: Timestamp agreementSoundToText;
	10: bool notificationEnable;
	74: string privacyPolicyVersion;
	11: Timestamp notificationMuteExpiration;
	75: Timestamp agreementAdByWebAccess;
	12: bool notificationNewMessage;
	76: Timestamp agreementPhoneNumberMatching;
	13: bool notificationGroupInvitation;
	77: Timestamp agreementCommunicationInfo;
	14: bool notificationShowMessage;
	79: Timestamp agreementThingsWirelessCommunication;
}

struct SnsIdUserStatus{
	 1: bool userExisting;
	 2: bool phoneNumberRegistered;
	 3: bool sameDevice;
	 4: h0_a_e_a_b_g accountMigrationCheckType;
}

struct SnsProfile{
	 1: string snsUserId;
	 2: string snsUserName;
	 3: string email;
	 4: string thumbnailUrl;
}

struct SpotItem{
	 2: string name;
	 3: string phone;
	 4: h0_a_e_a_b_gi category;
	 5: MID mid;
	 6: string countryAreaCode;
	10: bool freePhoneCallable;
}

struct TMessageReadRange{
	 1: required MID chatId;
	 2: required map<MID,list<TMessageReadRangeEntry>> ranges;
}

struct TMessageReadRangeEntry{
	 1: required i64 startMessageId;
	 2: required i64 endMessageId;
	 3: required Timestamp startTime;
	 4: required Timestamp endTime;
}

exception TalkException{
	 1: h0_a_e_a_b_gc code;
	 2: string reason;
	 3: map<string,string> parameterMap;
}

struct TestCallRoute{
	 1: string token;
	 2: CallHost voipServer;
}

struct Ticket{
	 1: string id;
	10: Timestamp expirationTime;
	21: i32 maxUseCount;
}

struct UnfollowRequest{
	 1: FollowMid followMid;
}

struct UpdateChatRequest{
	 1: RequestSequence reqSeq;
	 2: Chat chat;
	 3: h0_a_e_a_b_r9 updatedAttribute;
}

struct UpdateProfileAttributesRequest{
	 1: map<h0_a_e_a_b_tg,ProfileContent> profileAttributes;
}

struct UserAuthStatus{
	 1: bool phoneNumberRegistered;
	 2: list<h0_a_e_a_b_ci> registeredSnsIdTypes;
	 3: h0_a_e_a_b_g accountMigrationCheckType;
}

struct VerificationSessionData{
	 1: string sessionId;
	 2: h0_a_e_a_b_m30 method;
	 3: string callback;
	 4: string normalizedPhone;
	 5: string countryCode;
	 6: string nationalSignificantNumber;
	 7: list<h0_a_e_a_b_m30> availableVerificationMethods;
	 8: string callerIdMask;
}

struct WebLoginRequest{
	 1: string hookedFullUrl;
	 2: string sessionString;
	 3: bool fromIAB;
	 4: optional string sourceApplication;
}

struct WebLoginResponse{
	 1: string returnUrl;
	 2: optional string optionalReturnUrl;
	 3: optional string redirectConfirmationPageUrl;
}

struct ProductProperty{
	 1: optional StickerProperty stickerProperty;
	 3: optional SticonProperty sticonProperty;
	 2: optional ThemeProperty themeProperty;
}

struct ProductSearchSummary{
	 4: string author;
	16: string authorId;
	19: h0_a_a_c_a_a_k1 availability;
	13: bool availableForPresent;
	14: bool availableForPurchase;
	17: bool bargainFlag;
	18: string copyright;
	 1: string id;
	20: optional string interactionEventParameter;
	 3: string name;
	 7: bool newFlag;
	12: bool onSale;
	 9: string priceInLineCoin;
	 8: i32 priceTier;
	 5: PromotionInfo promotionInfo;
	10: ProductProperty property;
	11: h0_a_a_c_a_a_t3 subType;
	 2: h0_a_a_c_a_a_v1 type;
	15: i32 validDays;
	 6: i64 version;
}

